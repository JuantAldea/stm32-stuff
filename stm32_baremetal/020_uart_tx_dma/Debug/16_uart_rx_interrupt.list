
16_uart_rx_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ddc  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08000f84  08000f84  00010f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ff0  08000ff0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08000ff0  08000ff0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ff0  08000ff0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ff0  08000ff0  00010ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ff4  08000ff4  00010ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08000ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000064  0800105c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  0800105c  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003896  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000939  00000000  00000000  0002392a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000170  00000000  00000000  00024268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000128  00000000  00000000  000243d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2d5  00000000  00000000  00024500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001be1  00000000  00000000  0003e7d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d9c1  00000000  00000000  000403b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cdd77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b24  00000000  00000000  000cddcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000064 	.word	0x20000064
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000f6c 	.word	0x08000f6c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000068 	.word	0x20000068
 80001e4:	08000f6c 	.word	0x08000f6c

080001e8 <main>:

#define PIN6 (1UL << 6);

#define LED1_PIN PIN6

int main(void) {
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001ec:	4b0b      	ldr	r3, [pc, #44]	; (800021c <main+0x34>)
 80001ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f0:	4a0a      	ldr	r2, [pc, #40]	; (800021c <main+0x34>)
 80001f2:	f043 0301 	orr.w	r3, r3, #1
 80001f6:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER |= (1UL << 12);
 80001f8:	4b09      	ldr	r3, [pc, #36]	; (8000220 <main+0x38>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a08      	ldr	r2, [pc, #32]	; (8000220 <main+0x38>)
 80001fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000202:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1UL << 13);
 8000204:	4b06      	ldr	r3, [pc, #24]	; (8000220 <main+0x38>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a05      	ldr	r2, [pc, #20]	; (8000220 <main+0x38>)
 800020a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800020e:	6013      	str	r3, [r2, #0]

	uart1_rx_tx_interrupt_init();
 8000210:	f000 f8ee 	bl	80003f0 <uart1_rx_tx_interrupt_init>
	printf("%s\n", __FUNCTION__);
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <main+0x3c>)
 8000216:	f000 fa51 	bl	80006bc <puts>
	while (1) {
 800021a:	e7fe      	b.n	800021a <main+0x32>
 800021c:	40023800 	.word	0x40023800
 8000220:	40020000 	.word	0x40020000
 8000224:	08000f84 	.word	0x08000f84

08000228 <USART1_IRQHandler>:
	}
}



void USART1_IRQHandler(void) {
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	if (USART1->SR & USART_SR_RXNE) {
 800022c:	4b0c      	ldr	r3, [pc, #48]	; (8000260 <USART1_IRQHandler+0x38>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	f003 0320 	and.w	r3, r3, #32
 8000234:	2b00      	cmp	r3, #0
 8000236:	d00f      	beq.n	8000258 <USART1_IRQHandler+0x30>
		key = USART1->DR;
 8000238:	4b09      	ldr	r3, [pc, #36]	; (8000260 <USART1_IRQHandler+0x38>)
 800023a:	685b      	ldr	r3, [r3, #4]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4b09      	ldr	r3, [pc, #36]	; (8000264 <USART1_IRQHandler+0x3c>)
 8000240:	701a      	strb	r2, [r3, #0]
		if (key == 'a') {
 8000242:	4b08      	ldr	r3, [pc, #32]	; (8000264 <USART1_IRQHandler+0x3c>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	2b61      	cmp	r3, #97	; 0x61
 8000248:	d105      	bne.n	8000256 <USART1_IRQHandler+0x2e>
			GPIOA->ODR ^= LED1_PIN;
 800024a:	4b07      	ldr	r3, [pc, #28]	; (8000268 <USART1_IRQHandler+0x40>)
 800024c:	695b      	ldr	r3, [r3, #20]
 800024e:	4a06      	ldr	r2, [pc, #24]	; (8000268 <USART1_IRQHandler+0x40>)
 8000250:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8000254:	6153      	str	r3, [r2, #20]
		}
		return;
 8000256:	bf00      	nop
	}
}
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr
 8000260:	40011000 	.word	0x40011000
 8000264:	2000008c 	.word	0x2000008c
 8000268:	40020000 	.word	0x40020000

0800026c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b086      	sub	sp, #24
 8000270:	af00      	add	r7, sp, #0
 8000272:	60f8      	str	r0, [r7, #12]
 8000274:	60b9      	str	r1, [r7, #8]
 8000276:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000278:	2300      	movs	r3, #0
 800027a:	617b      	str	r3, [r7, #20]
 800027c:	e00a      	b.n	8000294 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800027e:	f3af 8000 	nop.w
 8000282:	4601      	mov	r1, r0
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	1c5a      	adds	r2, r3, #1
 8000288:	60ba      	str	r2, [r7, #8]
 800028a:	b2ca      	uxtb	r2, r1
 800028c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800028e:	697b      	ldr	r3, [r7, #20]
 8000290:	3301      	adds	r3, #1
 8000292:	617b      	str	r3, [r7, #20]
 8000294:	697a      	ldr	r2, [r7, #20]
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	429a      	cmp	r2, r3
 800029a:	dbf0      	blt.n	800027e <_read+0x12>
	}

return len;
 800029c:	687b      	ldr	r3, [r7, #4]
}
 800029e:	4618      	mov	r0, r3
 80002a0:	3718      	adds	r7, #24
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}

080002a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002a6:	b580      	push	{r7, lr}
 80002a8:	b086      	sub	sp, #24
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	60f8      	str	r0, [r7, #12]
 80002ae:	60b9      	str	r1, [r7, #8]
 80002b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002b2:	2300      	movs	r3, #0
 80002b4:	617b      	str	r3, [r7, #20]
 80002b6:	e009      	b.n	80002cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	1c5a      	adds	r2, r3, #1
 80002bc:	60ba      	str	r2, [r7, #8]
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 f921 	bl	8000508 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	3301      	adds	r3, #1
 80002ca:	617b      	str	r3, [r7, #20]
 80002cc:	697a      	ldr	r2, [r7, #20]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	dbf1      	blt.n	80002b8 <_write+0x12>
	}
	return len;
 80002d4:	687b      	ldr	r3, [r7, #4]
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3718      	adds	r7, #24
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}

080002de <_close>:

int _close(int file)
{
 80002de:	b480      	push	{r7}
 80002e0:	b083      	sub	sp, #12
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	6078      	str	r0, [r7, #4]
	return -1;
 80002e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr

080002f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80002f6:	b480      	push	{r7}
 80002f8:	b083      	sub	sp, #12
 80002fa:	af00      	add	r7, sp, #0
 80002fc:	6078      	str	r0, [r7, #4]
 80002fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000306:	605a      	str	r2, [r3, #4]
	return 0;
 8000308:	2300      	movs	r3, #0
}
 800030a:	4618      	mov	r0, r3
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr

08000316 <_isatty>:

int _isatty(int file)
{
 8000316:	b480      	push	{r7}
 8000318:	b083      	sub	sp, #12
 800031a:	af00      	add	r7, sp, #0
 800031c:	6078      	str	r0, [r7, #4]
	return 1;
 800031e:	2301      	movs	r3, #1
}
 8000320:	4618      	mov	r0, r3
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr

0800032c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	60f8      	str	r0, [r7, #12]
 8000334:	60b9      	str	r1, [r7, #8]
 8000336:	607a      	str	r2, [r7, #4]
	return 0;
 8000338:	2300      	movs	r3, #0
}
 800033a:	4618      	mov	r0, r3
 800033c:	3714      	adds	r7, #20
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
	...

08000348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000350:	4a14      	ldr	r2, [pc, #80]	; (80003a4 <_sbrk+0x5c>)
 8000352:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <_sbrk+0x60>)
 8000354:	1ad3      	subs	r3, r2, r3
 8000356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800035c:	4b13      	ldr	r3, [pc, #76]	; (80003ac <_sbrk+0x64>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d102      	bne.n	800036a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000364:	4b11      	ldr	r3, [pc, #68]	; (80003ac <_sbrk+0x64>)
 8000366:	4a12      	ldr	r2, [pc, #72]	; (80003b0 <_sbrk+0x68>)
 8000368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800036a:	4b10      	ldr	r3, [pc, #64]	; (80003ac <_sbrk+0x64>)
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4413      	add	r3, r2
 8000372:	693a      	ldr	r2, [r7, #16]
 8000374:	429a      	cmp	r2, r3
 8000376:	d207      	bcs.n	8000388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000378:	f000 f900 	bl	800057c <__errno>
 800037c:	4603      	mov	r3, r0
 800037e:	220c      	movs	r2, #12
 8000380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000386:	e009      	b.n	800039c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000388:	4b08      	ldr	r3, [pc, #32]	; (80003ac <_sbrk+0x64>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800038e:	4b07      	ldr	r3, [pc, #28]	; (80003ac <_sbrk+0x64>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4413      	add	r3, r2
 8000396:	4a05      	ldr	r2, [pc, #20]	; (80003ac <_sbrk+0x64>)
 8000398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800039a:	68fb      	ldr	r3, [r7, #12]
}
 800039c:	4618      	mov	r0, r3
 800039e:	3718      	adds	r7, #24
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	20020000 	.word	0x20020000
 80003a8:	00000400 	.word	0x00000400
 80003ac:	20000080 	.word	0x20000080
 80003b0:	200000a0 	.word	0x200000a0

080003b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db0b      	blt.n	80003de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	f003 021f 	and.w	r2, r3, #31
 80003cc:	4907      	ldr	r1, [pc, #28]	; (80003ec <__NVIC_EnableIRQ+0x38>)
 80003ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003d2:	095b      	lsrs	r3, r3, #5
 80003d4:	2001      	movs	r0, #1
 80003d6:	fa00 f202 	lsl.w	r2, r0, r2
 80003da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003de:	bf00      	nop
 80003e0:	370c      	adds	r7, #12
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	e000e100 	.word	0xe000e100

080003f0 <uart1_rx_tx_interrupt_init>:
	set_uart_baudrate(USART1, APB1_CLK, UART_BAUDRATE);
	// transfer direction & enable UART module
	USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
}

void uart1_rx_tx_interrupt_init() {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	//UART1_TX -> PA9
	// pass clock to GPIO_A
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80003f4:	4b1f      	ldr	r3, [pc, #124]	; (8000474 <uart1_rx_tx_interrupt_init+0x84>)
 80003f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f8:	4a1e      	ldr	r2, [pc, #120]	; (8000474 <uart1_rx_tx_interrupt_init+0x84>)
 80003fa:	f043 0301 	orr.w	r3, r3, #1
 80003fe:	6313      	str	r3, [r2, #48]	; 0x30
	//pass clock to USART1
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000400:	4b1c      	ldr	r3, [pc, #112]	; (8000474 <uart1_rx_tx_interrupt_init+0x84>)
 8000402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000404:	4a1b      	ldr	r2, [pc, #108]	; (8000474 <uart1_rx_tx_interrupt_init+0x84>)
 8000406:	f043 0310 	orr.w	r3, r3, #16
 800040a:	6453      	str	r3, [r2, #68]	; 0x44

	//set mode to alternate function
	GPIOA->MODER &= ~GPIO_MODER_MODER9;
 800040c:	4b1a      	ldr	r3, [pc, #104]	; (8000478 <uart1_rx_tx_interrupt_init+0x88>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a19      	ldr	r2, [pc, #100]	; (8000478 <uart1_rx_tx_interrupt_init+0x88>)
 8000412:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000416:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER9_1;
 8000418:	4b17      	ldr	r3, [pc, #92]	; (8000478 <uart1_rx_tx_interrupt_init+0x88>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a16      	ldr	r2, [pc, #88]	; (8000478 <uart1_rx_tx_interrupt_init+0x88>)
 800041e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000422:	6013      	str	r3, [r2, #0]

	GPIOA->MODER &= ~GPIO_MODER_MODER10;
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <uart1_rx_tx_interrupt_init+0x88>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a13      	ldr	r2, [pc, #76]	; (8000478 <uart1_rx_tx_interrupt_init+0x88>)
 800042a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800042e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER10_1;
 8000430:	4b11      	ldr	r3, [pc, #68]	; (8000478 <uart1_rx_tx_interrupt_init+0x88>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a10      	ldr	r2, [pc, #64]	; (8000478 <uart1_rx_tx_interrupt_init+0x88>)
 8000436:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800043a:	6013      	str	r3, [r2, #0]

	// set alternate function to USART_TX AF07 (0111 -> 0x7 :D)
	GPIOA->AFR[1] |= GPIO_AFRH_AFSEL9_2 | GPIO_AFRH_AFSEL9_1 | GPIO_AFRH_AFSEL9_0;
 800043c:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <uart1_rx_tx_interrupt_init+0x88>)
 800043e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000440:	4a0d      	ldr	r2, [pc, #52]	; (8000478 <uart1_rx_tx_interrupt_init+0x88>)
 8000442:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000446:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= GPIO_AFRH_AFSEL10_2 | GPIO_AFRH_AFSEL10_1 | GPIO_AFRH_AFSEL10_0;
 8000448:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <uart1_rx_tx_interrupt_init+0x88>)
 800044a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800044c:	4a0a      	ldr	r2, [pc, #40]	; (8000478 <uart1_rx_tx_interrupt_init+0x88>)
 800044e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000452:	6253      	str	r3, [r2, #36]	; 0x24
	// configure UART module
	// baud rate
	set_uart_baudrate(USART1, APB1_CLK, UART_BAUDRATE);
 8000454:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000458:	4908      	ldr	r1, [pc, #32]	; (800047c <uart1_rx_tx_interrupt_init+0x8c>)
 800045a:	4809      	ldr	r0, [pc, #36]	; (8000480 <uart1_rx_tx_interrupt_init+0x90>)
 800045c:	f000 f842 	bl	80004e4 <set_uart_baudrate>
	// transfer direction & enable UART module
	USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE | USART_CR1_RXNEIE;
 8000460:	4b07      	ldr	r3, [pc, #28]	; (8000480 <uart1_rx_tx_interrupt_init+0x90>)
 8000462:	f242 022c 	movw	r2, #8236	; 0x202c
 8000466:	60da      	str	r2, [r3, #12]
	NVIC_EnableIRQ(USART1_IRQn);
 8000468:	2025      	movs	r0, #37	; 0x25
 800046a:	f7ff ffa3 	bl	80003b4 <__NVIC_EnableIRQ>
}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40023800 	.word	0x40023800
 8000478:	40020000 	.word	0x40020000
 800047c:	00f42400 	.word	0x00f42400
 8000480:	40011000 	.word	0x40011000

08000484 <uart_write>:

	}
	return uartx->DR;
}

void uart_write(USART_TypeDef *uartx, int ch) {
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
 800048c:	6039      	str	r1, [r7, #0]
	// ensure transmit data register is empty
	while (!(uartx->SR & USART_SR_TXE)) {
 800048e:	bf00      	nop
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000498:	2b00      	cmp	r3, #0
 800049a:	d0f9      	beq.n	8000490 <uart_write+0xc>

	}
	// write to transmit data register
	uartx->DR = ch;
 800049c:	683a      	ldr	r2, [r7, #0]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	605a      	str	r2, [r3, #4]

	while (!(uartx->SR & USART_SR_TXE)) {
 80004a2:	bf00      	nop
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d0f9      	beq.n	80004a4 <uart_write+0x20>
	}
}
 80004b0:	bf00      	nop
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr

080004be <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t perif_clk, uint32_t baudrate) {
 80004be:	b480      	push	{r7}
 80004c0:	b083      	sub	sp, #12
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
 80004c6:	6039      	str	r1, [r7, #0]

	//USARTx->BRR = (8 << 4) | 11;

	// integer round up equivalent to round(x.y) = X.Y + 0.5
	// CLK/BR + 1/2
	return (perif_clk + (baudrate / 2U)) / baudrate;
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	085a      	lsrs	r2, r3, #1
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	441a      	add	r2, r3
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80004d6:	b29b      	uxth	r3, r3
}
 80004d8:	4618      	mov	r0, r3
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <set_uart_baudrate>:

static void set_uart_baudrate(USART_TypeDef *USARTx, uint32_t perif_clk, uint32_t baudrate) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]

	USARTx->BRR = compute_uart_bd(perif_clk, baudrate);
 80004f0:	6879      	ldr	r1, [r7, #4]
 80004f2:	68b8      	ldr	r0, [r7, #8]
 80004f4:	f7ff ffe3 	bl	80004be <compute_uart_bd>
 80004f8:	4603      	mov	r3, r0
 80004fa:	461a      	mov	r2, r3
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	609a      	str	r2, [r3, #8]
}
 8000500:	bf00      	nop
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <__io_putchar>:

int __io_putchar(int ch) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	uart_write(USART1, ch);
 8000510:	6879      	ldr	r1, [r7, #4]
 8000512:	4804      	ldr	r0, [pc, #16]	; (8000524 <__io_putchar+0x1c>)
 8000514:	f7ff ffb6 	bl	8000484 <uart_write>
	return ch;
 8000518:	687b      	ldr	r3, [r7, #4]
}
 800051a:	4618      	mov	r0, r3
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40011000 	.word	0x40011000

08000528 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000528:	480d      	ldr	r0, [pc, #52]	; (8000560 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800052a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800052c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000530:	480c      	ldr	r0, [pc, #48]	; (8000564 <LoopForever+0x6>)
  ldr r1, =_edata
 8000532:	490d      	ldr	r1, [pc, #52]	; (8000568 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000534:	4a0d      	ldr	r2, [pc, #52]	; (800056c <LoopForever+0xe>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000538:	e002      	b.n	8000540 <LoopCopyDataInit>

0800053a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800053c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053e:	3304      	adds	r3, #4

08000540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000544:	d3f9      	bcc.n	800053a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000546:	4a0a      	ldr	r2, [pc, #40]	; (8000570 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000548:	4c0a      	ldr	r4, [pc, #40]	; (8000574 <LoopForever+0x16>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800054c:	e001      	b.n	8000552 <LoopFillZerobss>

0800054e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000550:	3204      	adds	r2, #4

08000552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000554:	d3fb      	bcc.n	800054e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000556:	f000 f817 	bl	8000588 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800055a:	f7ff fe45 	bl	80001e8 <main>

0800055e <LoopForever>:

LoopForever:
    b LoopForever
 800055e:	e7fe      	b.n	800055e <LoopForever>
  ldr   r0, =_estack
 8000560:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000568:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800056c:	08000ff8 	.word	0x08000ff8
  ldr r2, =_sbss
 8000570:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000574:	2000009c 	.word	0x2000009c

08000578 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000578:	e7fe      	b.n	8000578 <ADC_IRQHandler>
	...

0800057c <__errno>:
 800057c:	4b01      	ldr	r3, [pc, #4]	; (8000584 <__errno+0x8>)
 800057e:	6818      	ldr	r0, [r3, #0]
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000000 	.word	0x20000000

08000588 <__libc_init_array>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	4d0d      	ldr	r5, [pc, #52]	; (80005c0 <__libc_init_array+0x38>)
 800058c:	4c0d      	ldr	r4, [pc, #52]	; (80005c4 <__libc_init_array+0x3c>)
 800058e:	1b64      	subs	r4, r4, r5
 8000590:	10a4      	asrs	r4, r4, #2
 8000592:	2600      	movs	r6, #0
 8000594:	42a6      	cmp	r6, r4
 8000596:	d109      	bne.n	80005ac <__libc_init_array+0x24>
 8000598:	4d0b      	ldr	r5, [pc, #44]	; (80005c8 <__libc_init_array+0x40>)
 800059a:	4c0c      	ldr	r4, [pc, #48]	; (80005cc <__libc_init_array+0x44>)
 800059c:	f000 fce6 	bl	8000f6c <_init>
 80005a0:	1b64      	subs	r4, r4, r5
 80005a2:	10a4      	asrs	r4, r4, #2
 80005a4:	2600      	movs	r6, #0
 80005a6:	42a6      	cmp	r6, r4
 80005a8:	d105      	bne.n	80005b6 <__libc_init_array+0x2e>
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80005b0:	4798      	blx	r3
 80005b2:	3601      	adds	r6, #1
 80005b4:	e7ee      	b.n	8000594 <__libc_init_array+0xc>
 80005b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ba:	4798      	blx	r3
 80005bc:	3601      	adds	r6, #1
 80005be:	e7f2      	b.n	80005a6 <__libc_init_array+0x1e>
 80005c0:	08000ff0 	.word	0x08000ff0
 80005c4:	08000ff0 	.word	0x08000ff0
 80005c8:	08000ff0 	.word	0x08000ff0
 80005cc:	08000ff4 	.word	0x08000ff4

080005d0 <memset>:
 80005d0:	4402      	add	r2, r0
 80005d2:	4603      	mov	r3, r0
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d100      	bne.n	80005da <memset+0xa>
 80005d8:	4770      	bx	lr
 80005da:	f803 1b01 	strb.w	r1, [r3], #1
 80005de:	e7f9      	b.n	80005d4 <memset+0x4>

080005e0 <_puts_r>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	460e      	mov	r6, r1
 80005e4:	4605      	mov	r5, r0
 80005e6:	b118      	cbz	r0, 80005f0 <_puts_r+0x10>
 80005e8:	6983      	ldr	r3, [r0, #24]
 80005ea:	b90b      	cbnz	r3, 80005f0 <_puts_r+0x10>
 80005ec:	f000 fa48 	bl	8000a80 <__sinit>
 80005f0:	69ab      	ldr	r3, [r5, #24]
 80005f2:	68ac      	ldr	r4, [r5, #8]
 80005f4:	b913      	cbnz	r3, 80005fc <_puts_r+0x1c>
 80005f6:	4628      	mov	r0, r5
 80005f8:	f000 fa42 	bl	8000a80 <__sinit>
 80005fc:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <_puts_r+0xd0>)
 80005fe:	429c      	cmp	r4, r3
 8000600:	d120      	bne.n	8000644 <_puts_r+0x64>
 8000602:	686c      	ldr	r4, [r5, #4]
 8000604:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000606:	07db      	lsls	r3, r3, #31
 8000608:	d405      	bmi.n	8000616 <_puts_r+0x36>
 800060a:	89a3      	ldrh	r3, [r4, #12]
 800060c:	0598      	lsls	r0, r3, #22
 800060e:	d402      	bmi.n	8000616 <_puts_r+0x36>
 8000610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000612:	f000 fad3 	bl	8000bbc <__retarget_lock_acquire_recursive>
 8000616:	89a3      	ldrh	r3, [r4, #12]
 8000618:	0719      	lsls	r1, r3, #28
 800061a:	d51d      	bpl.n	8000658 <_puts_r+0x78>
 800061c:	6923      	ldr	r3, [r4, #16]
 800061e:	b1db      	cbz	r3, 8000658 <_puts_r+0x78>
 8000620:	3e01      	subs	r6, #1
 8000622:	68a3      	ldr	r3, [r4, #8]
 8000624:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000628:	3b01      	subs	r3, #1
 800062a:	60a3      	str	r3, [r4, #8]
 800062c:	bb39      	cbnz	r1, 800067e <_puts_r+0x9e>
 800062e:	2b00      	cmp	r3, #0
 8000630:	da38      	bge.n	80006a4 <_puts_r+0xc4>
 8000632:	4622      	mov	r2, r4
 8000634:	210a      	movs	r1, #10
 8000636:	4628      	mov	r0, r5
 8000638:	f000 f848 	bl	80006cc <__swbuf_r>
 800063c:	3001      	adds	r0, #1
 800063e:	d011      	beq.n	8000664 <_puts_r+0x84>
 8000640:	250a      	movs	r5, #10
 8000642:	e011      	b.n	8000668 <_puts_r+0x88>
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <_puts_r+0xd4>)
 8000646:	429c      	cmp	r4, r3
 8000648:	d101      	bne.n	800064e <_puts_r+0x6e>
 800064a:	68ac      	ldr	r4, [r5, #8]
 800064c:	e7da      	b.n	8000604 <_puts_r+0x24>
 800064e:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <_puts_r+0xd8>)
 8000650:	429c      	cmp	r4, r3
 8000652:	bf08      	it	eq
 8000654:	68ec      	ldreq	r4, [r5, #12]
 8000656:	e7d5      	b.n	8000604 <_puts_r+0x24>
 8000658:	4621      	mov	r1, r4
 800065a:	4628      	mov	r0, r5
 800065c:	f000 f888 	bl	8000770 <__swsetup_r>
 8000660:	2800      	cmp	r0, #0
 8000662:	d0dd      	beq.n	8000620 <_puts_r+0x40>
 8000664:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000668:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800066a:	07da      	lsls	r2, r3, #31
 800066c:	d405      	bmi.n	800067a <_puts_r+0x9a>
 800066e:	89a3      	ldrh	r3, [r4, #12]
 8000670:	059b      	lsls	r3, r3, #22
 8000672:	d402      	bmi.n	800067a <_puts_r+0x9a>
 8000674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000676:	f000 faa2 	bl	8000bbe <__retarget_lock_release_recursive>
 800067a:	4628      	mov	r0, r5
 800067c:	bd70      	pop	{r4, r5, r6, pc}
 800067e:	2b00      	cmp	r3, #0
 8000680:	da04      	bge.n	800068c <_puts_r+0xac>
 8000682:	69a2      	ldr	r2, [r4, #24]
 8000684:	429a      	cmp	r2, r3
 8000686:	dc06      	bgt.n	8000696 <_puts_r+0xb6>
 8000688:	290a      	cmp	r1, #10
 800068a:	d004      	beq.n	8000696 <_puts_r+0xb6>
 800068c:	6823      	ldr	r3, [r4, #0]
 800068e:	1c5a      	adds	r2, r3, #1
 8000690:	6022      	str	r2, [r4, #0]
 8000692:	7019      	strb	r1, [r3, #0]
 8000694:	e7c5      	b.n	8000622 <_puts_r+0x42>
 8000696:	4622      	mov	r2, r4
 8000698:	4628      	mov	r0, r5
 800069a:	f000 f817 	bl	80006cc <__swbuf_r>
 800069e:	3001      	adds	r0, #1
 80006a0:	d1bf      	bne.n	8000622 <_puts_r+0x42>
 80006a2:	e7df      	b.n	8000664 <_puts_r+0x84>
 80006a4:	6823      	ldr	r3, [r4, #0]
 80006a6:	250a      	movs	r5, #10
 80006a8:	1c5a      	adds	r2, r3, #1
 80006aa:	6022      	str	r2, [r4, #0]
 80006ac:	701d      	strb	r5, [r3, #0]
 80006ae:	e7db      	b.n	8000668 <_puts_r+0x88>
 80006b0:	08000fb0 	.word	0x08000fb0
 80006b4:	08000fd0 	.word	0x08000fd0
 80006b8:	08000f90 	.word	0x08000f90

080006bc <puts>:
 80006bc:	4b02      	ldr	r3, [pc, #8]	; (80006c8 <puts+0xc>)
 80006be:	4601      	mov	r1, r0
 80006c0:	6818      	ldr	r0, [r3, #0]
 80006c2:	f7ff bf8d 	b.w	80005e0 <_puts_r>
 80006c6:	bf00      	nop
 80006c8:	20000000 	.word	0x20000000

080006cc <__swbuf_r>:
 80006cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ce:	460e      	mov	r6, r1
 80006d0:	4614      	mov	r4, r2
 80006d2:	4605      	mov	r5, r0
 80006d4:	b118      	cbz	r0, 80006de <__swbuf_r+0x12>
 80006d6:	6983      	ldr	r3, [r0, #24]
 80006d8:	b90b      	cbnz	r3, 80006de <__swbuf_r+0x12>
 80006da:	f000 f9d1 	bl	8000a80 <__sinit>
 80006de:	4b21      	ldr	r3, [pc, #132]	; (8000764 <__swbuf_r+0x98>)
 80006e0:	429c      	cmp	r4, r3
 80006e2:	d12b      	bne.n	800073c <__swbuf_r+0x70>
 80006e4:	686c      	ldr	r4, [r5, #4]
 80006e6:	69a3      	ldr	r3, [r4, #24]
 80006e8:	60a3      	str	r3, [r4, #8]
 80006ea:	89a3      	ldrh	r3, [r4, #12]
 80006ec:	071a      	lsls	r2, r3, #28
 80006ee:	d52f      	bpl.n	8000750 <__swbuf_r+0x84>
 80006f0:	6923      	ldr	r3, [r4, #16]
 80006f2:	b36b      	cbz	r3, 8000750 <__swbuf_r+0x84>
 80006f4:	6923      	ldr	r3, [r4, #16]
 80006f6:	6820      	ldr	r0, [r4, #0]
 80006f8:	1ac0      	subs	r0, r0, r3
 80006fa:	6963      	ldr	r3, [r4, #20]
 80006fc:	b2f6      	uxtb	r6, r6
 80006fe:	4283      	cmp	r3, r0
 8000700:	4637      	mov	r7, r6
 8000702:	dc04      	bgt.n	800070e <__swbuf_r+0x42>
 8000704:	4621      	mov	r1, r4
 8000706:	4628      	mov	r0, r5
 8000708:	f000 f926 	bl	8000958 <_fflush_r>
 800070c:	bb30      	cbnz	r0, 800075c <__swbuf_r+0x90>
 800070e:	68a3      	ldr	r3, [r4, #8]
 8000710:	3b01      	subs	r3, #1
 8000712:	60a3      	str	r3, [r4, #8]
 8000714:	6823      	ldr	r3, [r4, #0]
 8000716:	1c5a      	adds	r2, r3, #1
 8000718:	6022      	str	r2, [r4, #0]
 800071a:	701e      	strb	r6, [r3, #0]
 800071c:	6963      	ldr	r3, [r4, #20]
 800071e:	3001      	adds	r0, #1
 8000720:	4283      	cmp	r3, r0
 8000722:	d004      	beq.n	800072e <__swbuf_r+0x62>
 8000724:	89a3      	ldrh	r3, [r4, #12]
 8000726:	07db      	lsls	r3, r3, #31
 8000728:	d506      	bpl.n	8000738 <__swbuf_r+0x6c>
 800072a:	2e0a      	cmp	r6, #10
 800072c:	d104      	bne.n	8000738 <__swbuf_r+0x6c>
 800072e:	4621      	mov	r1, r4
 8000730:	4628      	mov	r0, r5
 8000732:	f000 f911 	bl	8000958 <_fflush_r>
 8000736:	b988      	cbnz	r0, 800075c <__swbuf_r+0x90>
 8000738:	4638      	mov	r0, r7
 800073a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <__swbuf_r+0x9c>)
 800073e:	429c      	cmp	r4, r3
 8000740:	d101      	bne.n	8000746 <__swbuf_r+0x7a>
 8000742:	68ac      	ldr	r4, [r5, #8]
 8000744:	e7cf      	b.n	80006e6 <__swbuf_r+0x1a>
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <__swbuf_r+0xa0>)
 8000748:	429c      	cmp	r4, r3
 800074a:	bf08      	it	eq
 800074c:	68ec      	ldreq	r4, [r5, #12]
 800074e:	e7ca      	b.n	80006e6 <__swbuf_r+0x1a>
 8000750:	4621      	mov	r1, r4
 8000752:	4628      	mov	r0, r5
 8000754:	f000 f80c 	bl	8000770 <__swsetup_r>
 8000758:	2800      	cmp	r0, #0
 800075a:	d0cb      	beq.n	80006f4 <__swbuf_r+0x28>
 800075c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000760:	e7ea      	b.n	8000738 <__swbuf_r+0x6c>
 8000762:	bf00      	nop
 8000764:	08000fb0 	.word	0x08000fb0
 8000768:	08000fd0 	.word	0x08000fd0
 800076c:	08000f90 	.word	0x08000f90

08000770 <__swsetup_r>:
 8000770:	4b32      	ldr	r3, [pc, #200]	; (800083c <__swsetup_r+0xcc>)
 8000772:	b570      	push	{r4, r5, r6, lr}
 8000774:	681d      	ldr	r5, [r3, #0]
 8000776:	4606      	mov	r6, r0
 8000778:	460c      	mov	r4, r1
 800077a:	b125      	cbz	r5, 8000786 <__swsetup_r+0x16>
 800077c:	69ab      	ldr	r3, [r5, #24]
 800077e:	b913      	cbnz	r3, 8000786 <__swsetup_r+0x16>
 8000780:	4628      	mov	r0, r5
 8000782:	f000 f97d 	bl	8000a80 <__sinit>
 8000786:	4b2e      	ldr	r3, [pc, #184]	; (8000840 <__swsetup_r+0xd0>)
 8000788:	429c      	cmp	r4, r3
 800078a:	d10f      	bne.n	80007ac <__swsetup_r+0x3c>
 800078c:	686c      	ldr	r4, [r5, #4]
 800078e:	89a3      	ldrh	r3, [r4, #12]
 8000790:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000794:	0719      	lsls	r1, r3, #28
 8000796:	d42c      	bmi.n	80007f2 <__swsetup_r+0x82>
 8000798:	06dd      	lsls	r5, r3, #27
 800079a:	d411      	bmi.n	80007c0 <__swsetup_r+0x50>
 800079c:	2309      	movs	r3, #9
 800079e:	6033      	str	r3, [r6, #0]
 80007a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80007a4:	81a3      	strh	r3, [r4, #12]
 80007a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007aa:	e03e      	b.n	800082a <__swsetup_r+0xba>
 80007ac:	4b25      	ldr	r3, [pc, #148]	; (8000844 <__swsetup_r+0xd4>)
 80007ae:	429c      	cmp	r4, r3
 80007b0:	d101      	bne.n	80007b6 <__swsetup_r+0x46>
 80007b2:	68ac      	ldr	r4, [r5, #8]
 80007b4:	e7eb      	b.n	800078e <__swsetup_r+0x1e>
 80007b6:	4b24      	ldr	r3, [pc, #144]	; (8000848 <__swsetup_r+0xd8>)
 80007b8:	429c      	cmp	r4, r3
 80007ba:	bf08      	it	eq
 80007bc:	68ec      	ldreq	r4, [r5, #12]
 80007be:	e7e6      	b.n	800078e <__swsetup_r+0x1e>
 80007c0:	0758      	lsls	r0, r3, #29
 80007c2:	d512      	bpl.n	80007ea <__swsetup_r+0x7a>
 80007c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80007c6:	b141      	cbz	r1, 80007da <__swsetup_r+0x6a>
 80007c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80007cc:	4299      	cmp	r1, r3
 80007ce:	d002      	beq.n	80007d6 <__swsetup_r+0x66>
 80007d0:	4630      	mov	r0, r6
 80007d2:	f000 fa59 	bl	8000c88 <_free_r>
 80007d6:	2300      	movs	r3, #0
 80007d8:	6363      	str	r3, [r4, #52]	; 0x34
 80007da:	89a3      	ldrh	r3, [r4, #12]
 80007dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80007e0:	81a3      	strh	r3, [r4, #12]
 80007e2:	2300      	movs	r3, #0
 80007e4:	6063      	str	r3, [r4, #4]
 80007e6:	6923      	ldr	r3, [r4, #16]
 80007e8:	6023      	str	r3, [r4, #0]
 80007ea:	89a3      	ldrh	r3, [r4, #12]
 80007ec:	f043 0308 	orr.w	r3, r3, #8
 80007f0:	81a3      	strh	r3, [r4, #12]
 80007f2:	6923      	ldr	r3, [r4, #16]
 80007f4:	b94b      	cbnz	r3, 800080a <__swsetup_r+0x9a>
 80007f6:	89a3      	ldrh	r3, [r4, #12]
 80007f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80007fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000800:	d003      	beq.n	800080a <__swsetup_r+0x9a>
 8000802:	4621      	mov	r1, r4
 8000804:	4630      	mov	r0, r6
 8000806:	f000 f9ff 	bl	8000c08 <__smakebuf_r>
 800080a:	89a0      	ldrh	r0, [r4, #12]
 800080c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000810:	f010 0301 	ands.w	r3, r0, #1
 8000814:	d00a      	beq.n	800082c <__swsetup_r+0xbc>
 8000816:	2300      	movs	r3, #0
 8000818:	60a3      	str	r3, [r4, #8]
 800081a:	6963      	ldr	r3, [r4, #20]
 800081c:	425b      	negs	r3, r3
 800081e:	61a3      	str	r3, [r4, #24]
 8000820:	6923      	ldr	r3, [r4, #16]
 8000822:	b943      	cbnz	r3, 8000836 <__swsetup_r+0xc6>
 8000824:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000828:	d1ba      	bne.n	80007a0 <__swsetup_r+0x30>
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	0781      	lsls	r1, r0, #30
 800082e:	bf58      	it	pl
 8000830:	6963      	ldrpl	r3, [r4, #20]
 8000832:	60a3      	str	r3, [r4, #8]
 8000834:	e7f4      	b.n	8000820 <__swsetup_r+0xb0>
 8000836:	2000      	movs	r0, #0
 8000838:	e7f7      	b.n	800082a <__swsetup_r+0xba>
 800083a:	bf00      	nop
 800083c:	20000000 	.word	0x20000000
 8000840:	08000fb0 	.word	0x08000fb0
 8000844:	08000fd0 	.word	0x08000fd0
 8000848:	08000f90 	.word	0x08000f90

0800084c <__sflush_r>:
 800084c:	898a      	ldrh	r2, [r1, #12]
 800084e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000852:	4605      	mov	r5, r0
 8000854:	0710      	lsls	r0, r2, #28
 8000856:	460c      	mov	r4, r1
 8000858:	d458      	bmi.n	800090c <__sflush_r+0xc0>
 800085a:	684b      	ldr	r3, [r1, #4]
 800085c:	2b00      	cmp	r3, #0
 800085e:	dc05      	bgt.n	800086c <__sflush_r+0x20>
 8000860:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000862:	2b00      	cmp	r3, #0
 8000864:	dc02      	bgt.n	800086c <__sflush_r+0x20>
 8000866:	2000      	movs	r0, #0
 8000868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800086c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800086e:	2e00      	cmp	r6, #0
 8000870:	d0f9      	beq.n	8000866 <__sflush_r+0x1a>
 8000872:	2300      	movs	r3, #0
 8000874:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000878:	682f      	ldr	r7, [r5, #0]
 800087a:	602b      	str	r3, [r5, #0]
 800087c:	d032      	beq.n	80008e4 <__sflush_r+0x98>
 800087e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000880:	89a3      	ldrh	r3, [r4, #12]
 8000882:	075a      	lsls	r2, r3, #29
 8000884:	d505      	bpl.n	8000892 <__sflush_r+0x46>
 8000886:	6863      	ldr	r3, [r4, #4]
 8000888:	1ac0      	subs	r0, r0, r3
 800088a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800088c:	b10b      	cbz	r3, 8000892 <__sflush_r+0x46>
 800088e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000890:	1ac0      	subs	r0, r0, r3
 8000892:	2300      	movs	r3, #0
 8000894:	4602      	mov	r2, r0
 8000896:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000898:	6a21      	ldr	r1, [r4, #32]
 800089a:	4628      	mov	r0, r5
 800089c:	47b0      	blx	r6
 800089e:	1c43      	adds	r3, r0, #1
 80008a0:	89a3      	ldrh	r3, [r4, #12]
 80008a2:	d106      	bne.n	80008b2 <__sflush_r+0x66>
 80008a4:	6829      	ldr	r1, [r5, #0]
 80008a6:	291d      	cmp	r1, #29
 80008a8:	d82c      	bhi.n	8000904 <__sflush_r+0xb8>
 80008aa:	4a2a      	ldr	r2, [pc, #168]	; (8000954 <__sflush_r+0x108>)
 80008ac:	40ca      	lsrs	r2, r1
 80008ae:	07d6      	lsls	r6, r2, #31
 80008b0:	d528      	bpl.n	8000904 <__sflush_r+0xb8>
 80008b2:	2200      	movs	r2, #0
 80008b4:	6062      	str	r2, [r4, #4]
 80008b6:	04d9      	lsls	r1, r3, #19
 80008b8:	6922      	ldr	r2, [r4, #16]
 80008ba:	6022      	str	r2, [r4, #0]
 80008bc:	d504      	bpl.n	80008c8 <__sflush_r+0x7c>
 80008be:	1c42      	adds	r2, r0, #1
 80008c0:	d101      	bne.n	80008c6 <__sflush_r+0x7a>
 80008c2:	682b      	ldr	r3, [r5, #0]
 80008c4:	b903      	cbnz	r3, 80008c8 <__sflush_r+0x7c>
 80008c6:	6560      	str	r0, [r4, #84]	; 0x54
 80008c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008ca:	602f      	str	r7, [r5, #0]
 80008cc:	2900      	cmp	r1, #0
 80008ce:	d0ca      	beq.n	8000866 <__sflush_r+0x1a>
 80008d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008d4:	4299      	cmp	r1, r3
 80008d6:	d002      	beq.n	80008de <__sflush_r+0x92>
 80008d8:	4628      	mov	r0, r5
 80008da:	f000 f9d5 	bl	8000c88 <_free_r>
 80008de:	2000      	movs	r0, #0
 80008e0:	6360      	str	r0, [r4, #52]	; 0x34
 80008e2:	e7c1      	b.n	8000868 <__sflush_r+0x1c>
 80008e4:	6a21      	ldr	r1, [r4, #32]
 80008e6:	2301      	movs	r3, #1
 80008e8:	4628      	mov	r0, r5
 80008ea:	47b0      	blx	r6
 80008ec:	1c41      	adds	r1, r0, #1
 80008ee:	d1c7      	bne.n	8000880 <__sflush_r+0x34>
 80008f0:	682b      	ldr	r3, [r5, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d0c4      	beq.n	8000880 <__sflush_r+0x34>
 80008f6:	2b1d      	cmp	r3, #29
 80008f8:	d001      	beq.n	80008fe <__sflush_r+0xb2>
 80008fa:	2b16      	cmp	r3, #22
 80008fc:	d101      	bne.n	8000902 <__sflush_r+0xb6>
 80008fe:	602f      	str	r7, [r5, #0]
 8000900:	e7b1      	b.n	8000866 <__sflush_r+0x1a>
 8000902:	89a3      	ldrh	r3, [r4, #12]
 8000904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000908:	81a3      	strh	r3, [r4, #12]
 800090a:	e7ad      	b.n	8000868 <__sflush_r+0x1c>
 800090c:	690f      	ldr	r7, [r1, #16]
 800090e:	2f00      	cmp	r7, #0
 8000910:	d0a9      	beq.n	8000866 <__sflush_r+0x1a>
 8000912:	0793      	lsls	r3, r2, #30
 8000914:	680e      	ldr	r6, [r1, #0]
 8000916:	bf08      	it	eq
 8000918:	694b      	ldreq	r3, [r1, #20]
 800091a:	600f      	str	r7, [r1, #0]
 800091c:	bf18      	it	ne
 800091e:	2300      	movne	r3, #0
 8000920:	eba6 0807 	sub.w	r8, r6, r7
 8000924:	608b      	str	r3, [r1, #8]
 8000926:	f1b8 0f00 	cmp.w	r8, #0
 800092a:	dd9c      	ble.n	8000866 <__sflush_r+0x1a>
 800092c:	6a21      	ldr	r1, [r4, #32]
 800092e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000930:	4643      	mov	r3, r8
 8000932:	463a      	mov	r2, r7
 8000934:	4628      	mov	r0, r5
 8000936:	47b0      	blx	r6
 8000938:	2800      	cmp	r0, #0
 800093a:	dc06      	bgt.n	800094a <__sflush_r+0xfe>
 800093c:	89a3      	ldrh	r3, [r4, #12]
 800093e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000942:	81a3      	strh	r3, [r4, #12]
 8000944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000948:	e78e      	b.n	8000868 <__sflush_r+0x1c>
 800094a:	4407      	add	r7, r0
 800094c:	eba8 0800 	sub.w	r8, r8, r0
 8000950:	e7e9      	b.n	8000926 <__sflush_r+0xda>
 8000952:	bf00      	nop
 8000954:	20400001 	.word	0x20400001

08000958 <_fflush_r>:
 8000958:	b538      	push	{r3, r4, r5, lr}
 800095a:	690b      	ldr	r3, [r1, #16]
 800095c:	4605      	mov	r5, r0
 800095e:	460c      	mov	r4, r1
 8000960:	b913      	cbnz	r3, 8000968 <_fflush_r+0x10>
 8000962:	2500      	movs	r5, #0
 8000964:	4628      	mov	r0, r5
 8000966:	bd38      	pop	{r3, r4, r5, pc}
 8000968:	b118      	cbz	r0, 8000972 <_fflush_r+0x1a>
 800096a:	6983      	ldr	r3, [r0, #24]
 800096c:	b90b      	cbnz	r3, 8000972 <_fflush_r+0x1a>
 800096e:	f000 f887 	bl	8000a80 <__sinit>
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <_fflush_r+0x6c>)
 8000974:	429c      	cmp	r4, r3
 8000976:	d11b      	bne.n	80009b0 <_fflush_r+0x58>
 8000978:	686c      	ldr	r4, [r5, #4]
 800097a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d0ef      	beq.n	8000962 <_fflush_r+0xa>
 8000982:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000984:	07d0      	lsls	r0, r2, #31
 8000986:	d404      	bmi.n	8000992 <_fflush_r+0x3a>
 8000988:	0599      	lsls	r1, r3, #22
 800098a:	d402      	bmi.n	8000992 <_fflush_r+0x3a>
 800098c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800098e:	f000 f915 	bl	8000bbc <__retarget_lock_acquire_recursive>
 8000992:	4628      	mov	r0, r5
 8000994:	4621      	mov	r1, r4
 8000996:	f7ff ff59 	bl	800084c <__sflush_r>
 800099a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800099c:	07da      	lsls	r2, r3, #31
 800099e:	4605      	mov	r5, r0
 80009a0:	d4e0      	bmi.n	8000964 <_fflush_r+0xc>
 80009a2:	89a3      	ldrh	r3, [r4, #12]
 80009a4:	059b      	lsls	r3, r3, #22
 80009a6:	d4dd      	bmi.n	8000964 <_fflush_r+0xc>
 80009a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009aa:	f000 f908 	bl	8000bbe <__retarget_lock_release_recursive>
 80009ae:	e7d9      	b.n	8000964 <_fflush_r+0xc>
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <_fflush_r+0x70>)
 80009b2:	429c      	cmp	r4, r3
 80009b4:	d101      	bne.n	80009ba <_fflush_r+0x62>
 80009b6:	68ac      	ldr	r4, [r5, #8]
 80009b8:	e7df      	b.n	800097a <_fflush_r+0x22>
 80009ba:	4b04      	ldr	r3, [pc, #16]	; (80009cc <_fflush_r+0x74>)
 80009bc:	429c      	cmp	r4, r3
 80009be:	bf08      	it	eq
 80009c0:	68ec      	ldreq	r4, [r5, #12]
 80009c2:	e7da      	b.n	800097a <_fflush_r+0x22>
 80009c4:	08000fb0 	.word	0x08000fb0
 80009c8:	08000fd0 	.word	0x08000fd0
 80009cc:	08000f90 	.word	0x08000f90

080009d0 <std>:
 80009d0:	2300      	movs	r3, #0
 80009d2:	b510      	push	{r4, lr}
 80009d4:	4604      	mov	r4, r0
 80009d6:	e9c0 3300 	strd	r3, r3, [r0]
 80009da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80009de:	6083      	str	r3, [r0, #8]
 80009e0:	8181      	strh	r1, [r0, #12]
 80009e2:	6643      	str	r3, [r0, #100]	; 0x64
 80009e4:	81c2      	strh	r2, [r0, #14]
 80009e6:	6183      	str	r3, [r0, #24]
 80009e8:	4619      	mov	r1, r3
 80009ea:	2208      	movs	r2, #8
 80009ec:	305c      	adds	r0, #92	; 0x5c
 80009ee:	f7ff fdef 	bl	80005d0 <memset>
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <std+0x38>)
 80009f4:	6263      	str	r3, [r4, #36]	; 0x24
 80009f6:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <std+0x3c>)
 80009f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80009fa:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <std+0x40>)
 80009fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80009fe:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <std+0x44>)
 8000a00:	6224      	str	r4, [r4, #32]
 8000a02:	6323      	str	r3, [r4, #48]	; 0x30
 8000a04:	bd10      	pop	{r4, pc}
 8000a06:	bf00      	nop
 8000a08:	08000dfd 	.word	0x08000dfd
 8000a0c:	08000e1f 	.word	0x08000e1f
 8000a10:	08000e57 	.word	0x08000e57
 8000a14:	08000e7b 	.word	0x08000e7b

08000a18 <_cleanup_r>:
 8000a18:	4901      	ldr	r1, [pc, #4]	; (8000a20 <_cleanup_r+0x8>)
 8000a1a:	f000 b8af 	b.w	8000b7c <_fwalk_reent>
 8000a1e:	bf00      	nop
 8000a20:	08000959 	.word	0x08000959

08000a24 <__sfmoreglue>:
 8000a24:	b570      	push	{r4, r5, r6, lr}
 8000a26:	1e4a      	subs	r2, r1, #1
 8000a28:	2568      	movs	r5, #104	; 0x68
 8000a2a:	4355      	muls	r5, r2
 8000a2c:	460e      	mov	r6, r1
 8000a2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000a32:	f000 f979 	bl	8000d28 <_malloc_r>
 8000a36:	4604      	mov	r4, r0
 8000a38:	b140      	cbz	r0, 8000a4c <__sfmoreglue+0x28>
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	e9c0 1600 	strd	r1, r6, [r0]
 8000a40:	300c      	adds	r0, #12
 8000a42:	60a0      	str	r0, [r4, #8]
 8000a44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000a48:	f7ff fdc2 	bl	80005d0 <memset>
 8000a4c:	4620      	mov	r0, r4
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}

08000a50 <__sfp_lock_acquire>:
 8000a50:	4801      	ldr	r0, [pc, #4]	; (8000a58 <__sfp_lock_acquire+0x8>)
 8000a52:	f000 b8b3 	b.w	8000bbc <__retarget_lock_acquire_recursive>
 8000a56:	bf00      	nop
 8000a58:	20000095 	.word	0x20000095

08000a5c <__sfp_lock_release>:
 8000a5c:	4801      	ldr	r0, [pc, #4]	; (8000a64 <__sfp_lock_release+0x8>)
 8000a5e:	f000 b8ae 	b.w	8000bbe <__retarget_lock_release_recursive>
 8000a62:	bf00      	nop
 8000a64:	20000095 	.word	0x20000095

08000a68 <__sinit_lock_acquire>:
 8000a68:	4801      	ldr	r0, [pc, #4]	; (8000a70 <__sinit_lock_acquire+0x8>)
 8000a6a:	f000 b8a7 	b.w	8000bbc <__retarget_lock_acquire_recursive>
 8000a6e:	bf00      	nop
 8000a70:	20000090 	.word	0x20000090

08000a74 <__sinit_lock_release>:
 8000a74:	4801      	ldr	r0, [pc, #4]	; (8000a7c <__sinit_lock_release+0x8>)
 8000a76:	f000 b8a2 	b.w	8000bbe <__retarget_lock_release_recursive>
 8000a7a:	bf00      	nop
 8000a7c:	20000090 	.word	0x20000090

08000a80 <__sinit>:
 8000a80:	b510      	push	{r4, lr}
 8000a82:	4604      	mov	r4, r0
 8000a84:	f7ff fff0 	bl	8000a68 <__sinit_lock_acquire>
 8000a88:	69a3      	ldr	r3, [r4, #24]
 8000a8a:	b11b      	cbz	r3, 8000a94 <__sinit+0x14>
 8000a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a90:	f7ff bff0 	b.w	8000a74 <__sinit_lock_release>
 8000a94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000a98:	6523      	str	r3, [r4, #80]	; 0x50
 8000a9a:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <__sinit+0x68>)
 8000a9c:	4a13      	ldr	r2, [pc, #76]	; (8000aec <__sinit+0x6c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	62a2      	str	r2, [r4, #40]	; 0x28
 8000aa2:	42a3      	cmp	r3, r4
 8000aa4:	bf04      	itt	eq
 8000aa6:	2301      	moveq	r3, #1
 8000aa8:	61a3      	streq	r3, [r4, #24]
 8000aaa:	4620      	mov	r0, r4
 8000aac:	f000 f820 	bl	8000af0 <__sfp>
 8000ab0:	6060      	str	r0, [r4, #4]
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	f000 f81c 	bl	8000af0 <__sfp>
 8000ab8:	60a0      	str	r0, [r4, #8]
 8000aba:	4620      	mov	r0, r4
 8000abc:	f000 f818 	bl	8000af0 <__sfp>
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60e0      	str	r0, [r4, #12]
 8000ac4:	2104      	movs	r1, #4
 8000ac6:	6860      	ldr	r0, [r4, #4]
 8000ac8:	f7ff ff82 	bl	80009d0 <std>
 8000acc:	68a0      	ldr	r0, [r4, #8]
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2109      	movs	r1, #9
 8000ad2:	f7ff ff7d 	bl	80009d0 <std>
 8000ad6:	68e0      	ldr	r0, [r4, #12]
 8000ad8:	2202      	movs	r2, #2
 8000ada:	2112      	movs	r1, #18
 8000adc:	f7ff ff78 	bl	80009d0 <std>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	61a3      	str	r3, [r4, #24]
 8000ae4:	e7d2      	b.n	8000a8c <__sinit+0xc>
 8000ae6:	bf00      	nop
 8000ae8:	08000f8c 	.word	0x08000f8c
 8000aec:	08000a19 	.word	0x08000a19

08000af0 <__sfp>:
 8000af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000af2:	4607      	mov	r7, r0
 8000af4:	f7ff ffac 	bl	8000a50 <__sfp_lock_acquire>
 8000af8:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <__sfp+0x84>)
 8000afa:	681e      	ldr	r6, [r3, #0]
 8000afc:	69b3      	ldr	r3, [r6, #24]
 8000afe:	b913      	cbnz	r3, 8000b06 <__sfp+0x16>
 8000b00:	4630      	mov	r0, r6
 8000b02:	f7ff ffbd 	bl	8000a80 <__sinit>
 8000b06:	3648      	adds	r6, #72	; 0x48
 8000b08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	d503      	bpl.n	8000b18 <__sfp+0x28>
 8000b10:	6833      	ldr	r3, [r6, #0]
 8000b12:	b30b      	cbz	r3, 8000b58 <__sfp+0x68>
 8000b14:	6836      	ldr	r6, [r6, #0]
 8000b16:	e7f7      	b.n	8000b08 <__sfp+0x18>
 8000b18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000b1c:	b9d5      	cbnz	r5, 8000b54 <__sfp+0x64>
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <__sfp+0x88>)
 8000b20:	60e3      	str	r3, [r4, #12]
 8000b22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000b26:	6665      	str	r5, [r4, #100]	; 0x64
 8000b28:	f000 f847 	bl	8000bba <__retarget_lock_init_recursive>
 8000b2c:	f7ff ff96 	bl	8000a5c <__sfp_lock_release>
 8000b30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000b34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000b38:	6025      	str	r5, [r4, #0]
 8000b3a:	61a5      	str	r5, [r4, #24]
 8000b3c:	2208      	movs	r2, #8
 8000b3e:	4629      	mov	r1, r5
 8000b40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000b44:	f7ff fd44 	bl	80005d0 <memset>
 8000b48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000b4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000b50:	4620      	mov	r0, r4
 8000b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b54:	3468      	adds	r4, #104	; 0x68
 8000b56:	e7d9      	b.n	8000b0c <__sfp+0x1c>
 8000b58:	2104      	movs	r1, #4
 8000b5a:	4638      	mov	r0, r7
 8000b5c:	f7ff ff62 	bl	8000a24 <__sfmoreglue>
 8000b60:	4604      	mov	r4, r0
 8000b62:	6030      	str	r0, [r6, #0]
 8000b64:	2800      	cmp	r0, #0
 8000b66:	d1d5      	bne.n	8000b14 <__sfp+0x24>
 8000b68:	f7ff ff78 	bl	8000a5c <__sfp_lock_release>
 8000b6c:	230c      	movs	r3, #12
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	e7ee      	b.n	8000b50 <__sfp+0x60>
 8000b72:	bf00      	nop
 8000b74:	08000f8c 	.word	0x08000f8c
 8000b78:	ffff0001 	.word	0xffff0001

08000b7c <_fwalk_reent>:
 8000b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b80:	4606      	mov	r6, r0
 8000b82:	4688      	mov	r8, r1
 8000b84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000b88:	2700      	movs	r7, #0
 8000b8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000b8e:	f1b9 0901 	subs.w	r9, r9, #1
 8000b92:	d505      	bpl.n	8000ba0 <_fwalk_reent+0x24>
 8000b94:	6824      	ldr	r4, [r4, #0]
 8000b96:	2c00      	cmp	r4, #0
 8000b98:	d1f7      	bne.n	8000b8a <_fwalk_reent+0xe>
 8000b9a:	4638      	mov	r0, r7
 8000b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ba0:	89ab      	ldrh	r3, [r5, #12]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d907      	bls.n	8000bb6 <_fwalk_reent+0x3a>
 8000ba6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000baa:	3301      	adds	r3, #1
 8000bac:	d003      	beq.n	8000bb6 <_fwalk_reent+0x3a>
 8000bae:	4629      	mov	r1, r5
 8000bb0:	4630      	mov	r0, r6
 8000bb2:	47c0      	blx	r8
 8000bb4:	4307      	orrs	r7, r0
 8000bb6:	3568      	adds	r5, #104	; 0x68
 8000bb8:	e7e9      	b.n	8000b8e <_fwalk_reent+0x12>

08000bba <__retarget_lock_init_recursive>:
 8000bba:	4770      	bx	lr

08000bbc <__retarget_lock_acquire_recursive>:
 8000bbc:	4770      	bx	lr

08000bbe <__retarget_lock_release_recursive>:
 8000bbe:	4770      	bx	lr

08000bc0 <__swhatbuf_r>:
 8000bc0:	b570      	push	{r4, r5, r6, lr}
 8000bc2:	460e      	mov	r6, r1
 8000bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bc8:	2900      	cmp	r1, #0
 8000bca:	b096      	sub	sp, #88	; 0x58
 8000bcc:	4614      	mov	r4, r2
 8000bce:	461d      	mov	r5, r3
 8000bd0:	da07      	bge.n	8000be2 <__swhatbuf_r+0x22>
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	602b      	str	r3, [r5, #0]
 8000bd6:	89b3      	ldrh	r3, [r6, #12]
 8000bd8:	061a      	lsls	r2, r3, #24
 8000bda:	d410      	bmi.n	8000bfe <__swhatbuf_r+0x3e>
 8000bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be0:	e00e      	b.n	8000c00 <__swhatbuf_r+0x40>
 8000be2:	466a      	mov	r2, sp
 8000be4:	f000 f970 	bl	8000ec8 <_fstat_r>
 8000be8:	2800      	cmp	r0, #0
 8000bea:	dbf2      	blt.n	8000bd2 <__swhatbuf_r+0x12>
 8000bec:	9a01      	ldr	r2, [sp, #4]
 8000bee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000bf2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000bf6:	425a      	negs	r2, r3
 8000bf8:	415a      	adcs	r2, r3
 8000bfa:	602a      	str	r2, [r5, #0]
 8000bfc:	e7ee      	b.n	8000bdc <__swhatbuf_r+0x1c>
 8000bfe:	2340      	movs	r3, #64	; 0x40
 8000c00:	2000      	movs	r0, #0
 8000c02:	6023      	str	r3, [r4, #0]
 8000c04:	b016      	add	sp, #88	; 0x58
 8000c06:	bd70      	pop	{r4, r5, r6, pc}

08000c08 <__smakebuf_r>:
 8000c08:	898b      	ldrh	r3, [r1, #12]
 8000c0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000c0c:	079d      	lsls	r5, r3, #30
 8000c0e:	4606      	mov	r6, r0
 8000c10:	460c      	mov	r4, r1
 8000c12:	d507      	bpl.n	8000c24 <__smakebuf_r+0x1c>
 8000c14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000c18:	6023      	str	r3, [r4, #0]
 8000c1a:	6123      	str	r3, [r4, #16]
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	6163      	str	r3, [r4, #20]
 8000c20:	b002      	add	sp, #8
 8000c22:	bd70      	pop	{r4, r5, r6, pc}
 8000c24:	ab01      	add	r3, sp, #4
 8000c26:	466a      	mov	r2, sp
 8000c28:	f7ff ffca 	bl	8000bc0 <__swhatbuf_r>
 8000c2c:	9900      	ldr	r1, [sp, #0]
 8000c2e:	4605      	mov	r5, r0
 8000c30:	4630      	mov	r0, r6
 8000c32:	f000 f879 	bl	8000d28 <_malloc_r>
 8000c36:	b948      	cbnz	r0, 8000c4c <__smakebuf_r+0x44>
 8000c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c3c:	059a      	lsls	r2, r3, #22
 8000c3e:	d4ef      	bmi.n	8000c20 <__smakebuf_r+0x18>
 8000c40:	f023 0303 	bic.w	r3, r3, #3
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	81a3      	strh	r3, [r4, #12]
 8000c4a:	e7e3      	b.n	8000c14 <__smakebuf_r+0xc>
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <__smakebuf_r+0x7c>)
 8000c4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8000c50:	89a3      	ldrh	r3, [r4, #12]
 8000c52:	6020      	str	r0, [r4, #0]
 8000c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c58:	81a3      	strh	r3, [r4, #12]
 8000c5a:	9b00      	ldr	r3, [sp, #0]
 8000c5c:	6163      	str	r3, [r4, #20]
 8000c5e:	9b01      	ldr	r3, [sp, #4]
 8000c60:	6120      	str	r0, [r4, #16]
 8000c62:	b15b      	cbz	r3, 8000c7c <__smakebuf_r+0x74>
 8000c64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c68:	4630      	mov	r0, r6
 8000c6a:	f000 f93f 	bl	8000eec <_isatty_r>
 8000c6e:	b128      	cbz	r0, 8000c7c <__smakebuf_r+0x74>
 8000c70:	89a3      	ldrh	r3, [r4, #12]
 8000c72:	f023 0303 	bic.w	r3, r3, #3
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	81a3      	strh	r3, [r4, #12]
 8000c7c:	89a0      	ldrh	r0, [r4, #12]
 8000c7e:	4305      	orrs	r5, r0
 8000c80:	81a5      	strh	r5, [r4, #12]
 8000c82:	e7cd      	b.n	8000c20 <__smakebuf_r+0x18>
 8000c84:	08000a19 	.word	0x08000a19

08000c88 <_free_r>:
 8000c88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000c8a:	2900      	cmp	r1, #0
 8000c8c:	d048      	beq.n	8000d20 <_free_r+0x98>
 8000c8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c92:	9001      	str	r0, [sp, #4]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	f1a1 0404 	sub.w	r4, r1, #4
 8000c9a:	bfb8      	it	lt
 8000c9c:	18e4      	addlt	r4, r4, r3
 8000c9e:	f000 f947 	bl	8000f30 <__malloc_lock>
 8000ca2:	4a20      	ldr	r2, [pc, #128]	; (8000d24 <_free_r+0x9c>)
 8000ca4:	9801      	ldr	r0, [sp, #4]
 8000ca6:	6813      	ldr	r3, [r2, #0]
 8000ca8:	4615      	mov	r5, r2
 8000caa:	b933      	cbnz	r3, 8000cba <_free_r+0x32>
 8000cac:	6063      	str	r3, [r4, #4]
 8000cae:	6014      	str	r4, [r2, #0]
 8000cb0:	b003      	add	sp, #12
 8000cb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000cb6:	f000 b941 	b.w	8000f3c <__malloc_unlock>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d90b      	bls.n	8000cd6 <_free_r+0x4e>
 8000cbe:	6821      	ldr	r1, [r4, #0]
 8000cc0:	1862      	adds	r2, r4, r1
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	bf04      	itt	eq
 8000cc6:	681a      	ldreq	r2, [r3, #0]
 8000cc8:	685b      	ldreq	r3, [r3, #4]
 8000cca:	6063      	str	r3, [r4, #4]
 8000ccc:	bf04      	itt	eq
 8000cce:	1852      	addeq	r2, r2, r1
 8000cd0:	6022      	streq	r2, [r4, #0]
 8000cd2:	602c      	str	r4, [r5, #0]
 8000cd4:	e7ec      	b.n	8000cb0 <_free_r+0x28>
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	b10b      	cbz	r3, 8000ce0 <_free_r+0x58>
 8000cdc:	42a3      	cmp	r3, r4
 8000cde:	d9fa      	bls.n	8000cd6 <_free_r+0x4e>
 8000ce0:	6811      	ldr	r1, [r2, #0]
 8000ce2:	1855      	adds	r5, r2, r1
 8000ce4:	42a5      	cmp	r5, r4
 8000ce6:	d10b      	bne.n	8000d00 <_free_r+0x78>
 8000ce8:	6824      	ldr	r4, [r4, #0]
 8000cea:	4421      	add	r1, r4
 8000cec:	1854      	adds	r4, r2, r1
 8000cee:	42a3      	cmp	r3, r4
 8000cf0:	6011      	str	r1, [r2, #0]
 8000cf2:	d1dd      	bne.n	8000cb0 <_free_r+0x28>
 8000cf4:	681c      	ldr	r4, [r3, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	6053      	str	r3, [r2, #4]
 8000cfa:	4421      	add	r1, r4
 8000cfc:	6011      	str	r1, [r2, #0]
 8000cfe:	e7d7      	b.n	8000cb0 <_free_r+0x28>
 8000d00:	d902      	bls.n	8000d08 <_free_r+0x80>
 8000d02:	230c      	movs	r3, #12
 8000d04:	6003      	str	r3, [r0, #0]
 8000d06:	e7d3      	b.n	8000cb0 <_free_r+0x28>
 8000d08:	6825      	ldr	r5, [r4, #0]
 8000d0a:	1961      	adds	r1, r4, r5
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	bf04      	itt	eq
 8000d10:	6819      	ldreq	r1, [r3, #0]
 8000d12:	685b      	ldreq	r3, [r3, #4]
 8000d14:	6063      	str	r3, [r4, #4]
 8000d16:	bf04      	itt	eq
 8000d18:	1949      	addeq	r1, r1, r5
 8000d1a:	6021      	streq	r1, [r4, #0]
 8000d1c:	6054      	str	r4, [r2, #4]
 8000d1e:	e7c7      	b.n	8000cb0 <_free_r+0x28>
 8000d20:	b003      	add	sp, #12
 8000d22:	bd30      	pop	{r4, r5, pc}
 8000d24:	20000084 	.word	0x20000084

08000d28 <_malloc_r>:
 8000d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d2a:	1ccd      	adds	r5, r1, #3
 8000d2c:	f025 0503 	bic.w	r5, r5, #3
 8000d30:	3508      	adds	r5, #8
 8000d32:	2d0c      	cmp	r5, #12
 8000d34:	bf38      	it	cc
 8000d36:	250c      	movcc	r5, #12
 8000d38:	2d00      	cmp	r5, #0
 8000d3a:	4606      	mov	r6, r0
 8000d3c:	db01      	blt.n	8000d42 <_malloc_r+0x1a>
 8000d3e:	42a9      	cmp	r1, r5
 8000d40:	d903      	bls.n	8000d4a <_malloc_r+0x22>
 8000d42:	230c      	movs	r3, #12
 8000d44:	6033      	str	r3, [r6, #0]
 8000d46:	2000      	movs	r0, #0
 8000d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d4a:	f000 f8f1 	bl	8000f30 <__malloc_lock>
 8000d4e:	4921      	ldr	r1, [pc, #132]	; (8000dd4 <_malloc_r+0xac>)
 8000d50:	680a      	ldr	r2, [r1, #0]
 8000d52:	4614      	mov	r4, r2
 8000d54:	b99c      	cbnz	r4, 8000d7e <_malloc_r+0x56>
 8000d56:	4f20      	ldr	r7, [pc, #128]	; (8000dd8 <_malloc_r+0xb0>)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	b923      	cbnz	r3, 8000d66 <_malloc_r+0x3e>
 8000d5c:	4621      	mov	r1, r4
 8000d5e:	4630      	mov	r0, r6
 8000d60:	f000 f83c 	bl	8000ddc <_sbrk_r>
 8000d64:	6038      	str	r0, [r7, #0]
 8000d66:	4629      	mov	r1, r5
 8000d68:	4630      	mov	r0, r6
 8000d6a:	f000 f837 	bl	8000ddc <_sbrk_r>
 8000d6e:	1c43      	adds	r3, r0, #1
 8000d70:	d123      	bne.n	8000dba <_malloc_r+0x92>
 8000d72:	230c      	movs	r3, #12
 8000d74:	6033      	str	r3, [r6, #0]
 8000d76:	4630      	mov	r0, r6
 8000d78:	f000 f8e0 	bl	8000f3c <__malloc_unlock>
 8000d7c:	e7e3      	b.n	8000d46 <_malloc_r+0x1e>
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	1b5b      	subs	r3, r3, r5
 8000d82:	d417      	bmi.n	8000db4 <_malloc_r+0x8c>
 8000d84:	2b0b      	cmp	r3, #11
 8000d86:	d903      	bls.n	8000d90 <_malloc_r+0x68>
 8000d88:	6023      	str	r3, [r4, #0]
 8000d8a:	441c      	add	r4, r3
 8000d8c:	6025      	str	r5, [r4, #0]
 8000d8e:	e004      	b.n	8000d9a <_malloc_r+0x72>
 8000d90:	6863      	ldr	r3, [r4, #4]
 8000d92:	42a2      	cmp	r2, r4
 8000d94:	bf0c      	ite	eq
 8000d96:	600b      	streq	r3, [r1, #0]
 8000d98:	6053      	strne	r3, [r2, #4]
 8000d9a:	4630      	mov	r0, r6
 8000d9c:	f000 f8ce 	bl	8000f3c <__malloc_unlock>
 8000da0:	f104 000b 	add.w	r0, r4, #11
 8000da4:	1d23      	adds	r3, r4, #4
 8000da6:	f020 0007 	bic.w	r0, r0, #7
 8000daa:	1ac2      	subs	r2, r0, r3
 8000dac:	d0cc      	beq.n	8000d48 <_malloc_r+0x20>
 8000dae:	1a1b      	subs	r3, r3, r0
 8000db0:	50a3      	str	r3, [r4, r2]
 8000db2:	e7c9      	b.n	8000d48 <_malloc_r+0x20>
 8000db4:	4622      	mov	r2, r4
 8000db6:	6864      	ldr	r4, [r4, #4]
 8000db8:	e7cc      	b.n	8000d54 <_malloc_r+0x2c>
 8000dba:	1cc4      	adds	r4, r0, #3
 8000dbc:	f024 0403 	bic.w	r4, r4, #3
 8000dc0:	42a0      	cmp	r0, r4
 8000dc2:	d0e3      	beq.n	8000d8c <_malloc_r+0x64>
 8000dc4:	1a21      	subs	r1, r4, r0
 8000dc6:	4630      	mov	r0, r6
 8000dc8:	f000 f808 	bl	8000ddc <_sbrk_r>
 8000dcc:	3001      	adds	r0, #1
 8000dce:	d1dd      	bne.n	8000d8c <_malloc_r+0x64>
 8000dd0:	e7cf      	b.n	8000d72 <_malloc_r+0x4a>
 8000dd2:	bf00      	nop
 8000dd4:	20000084 	.word	0x20000084
 8000dd8:	20000088 	.word	0x20000088

08000ddc <_sbrk_r>:
 8000ddc:	b538      	push	{r3, r4, r5, lr}
 8000dde:	4d06      	ldr	r5, [pc, #24]	; (8000df8 <_sbrk_r+0x1c>)
 8000de0:	2300      	movs	r3, #0
 8000de2:	4604      	mov	r4, r0
 8000de4:	4608      	mov	r0, r1
 8000de6:	602b      	str	r3, [r5, #0]
 8000de8:	f7ff faae 	bl	8000348 <_sbrk>
 8000dec:	1c43      	adds	r3, r0, #1
 8000dee:	d102      	bne.n	8000df6 <_sbrk_r+0x1a>
 8000df0:	682b      	ldr	r3, [r5, #0]
 8000df2:	b103      	cbz	r3, 8000df6 <_sbrk_r+0x1a>
 8000df4:	6023      	str	r3, [r4, #0]
 8000df6:	bd38      	pop	{r3, r4, r5, pc}
 8000df8:	20000098 	.word	0x20000098

08000dfc <__sread>:
 8000dfc:	b510      	push	{r4, lr}
 8000dfe:	460c      	mov	r4, r1
 8000e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e04:	f000 f8a0 	bl	8000f48 <_read_r>
 8000e08:	2800      	cmp	r0, #0
 8000e0a:	bfab      	itete	ge
 8000e0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000e0e:	89a3      	ldrhlt	r3, [r4, #12]
 8000e10:	181b      	addge	r3, r3, r0
 8000e12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000e16:	bfac      	ite	ge
 8000e18:	6563      	strge	r3, [r4, #84]	; 0x54
 8000e1a:	81a3      	strhlt	r3, [r4, #12]
 8000e1c:	bd10      	pop	{r4, pc}

08000e1e <__swrite>:
 8000e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e22:	461f      	mov	r7, r3
 8000e24:	898b      	ldrh	r3, [r1, #12]
 8000e26:	05db      	lsls	r3, r3, #23
 8000e28:	4605      	mov	r5, r0
 8000e2a:	460c      	mov	r4, r1
 8000e2c:	4616      	mov	r6, r2
 8000e2e:	d505      	bpl.n	8000e3c <__swrite+0x1e>
 8000e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e34:	2302      	movs	r3, #2
 8000e36:	2200      	movs	r2, #0
 8000e38:	f000 f868 	bl	8000f0c <_lseek_r>
 8000e3c:	89a3      	ldrh	r3, [r4, #12]
 8000e3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e46:	81a3      	strh	r3, [r4, #12]
 8000e48:	4632      	mov	r2, r6
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	4628      	mov	r0, r5
 8000e4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e52:	f000 b817 	b.w	8000e84 <_write_r>

08000e56 <__sseek>:
 8000e56:	b510      	push	{r4, lr}
 8000e58:	460c      	mov	r4, r1
 8000e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e5e:	f000 f855 	bl	8000f0c <_lseek_r>
 8000e62:	1c43      	adds	r3, r0, #1
 8000e64:	89a3      	ldrh	r3, [r4, #12]
 8000e66:	bf15      	itete	ne
 8000e68:	6560      	strne	r0, [r4, #84]	; 0x54
 8000e6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000e6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000e72:	81a3      	strheq	r3, [r4, #12]
 8000e74:	bf18      	it	ne
 8000e76:	81a3      	strhne	r3, [r4, #12]
 8000e78:	bd10      	pop	{r4, pc}

08000e7a <__sclose>:
 8000e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e7e:	f000 b813 	b.w	8000ea8 <_close_r>
	...

08000e84 <_write_r>:
 8000e84:	b538      	push	{r3, r4, r5, lr}
 8000e86:	4d07      	ldr	r5, [pc, #28]	; (8000ea4 <_write_r+0x20>)
 8000e88:	4604      	mov	r4, r0
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	2200      	movs	r2, #0
 8000e90:	602a      	str	r2, [r5, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	f7ff fa07 	bl	80002a6 <_write>
 8000e98:	1c43      	adds	r3, r0, #1
 8000e9a:	d102      	bne.n	8000ea2 <_write_r+0x1e>
 8000e9c:	682b      	ldr	r3, [r5, #0]
 8000e9e:	b103      	cbz	r3, 8000ea2 <_write_r+0x1e>
 8000ea0:	6023      	str	r3, [r4, #0]
 8000ea2:	bd38      	pop	{r3, r4, r5, pc}
 8000ea4:	20000098 	.word	0x20000098

08000ea8 <_close_r>:
 8000ea8:	b538      	push	{r3, r4, r5, lr}
 8000eaa:	4d06      	ldr	r5, [pc, #24]	; (8000ec4 <_close_r+0x1c>)
 8000eac:	2300      	movs	r3, #0
 8000eae:	4604      	mov	r4, r0
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	602b      	str	r3, [r5, #0]
 8000eb4:	f7ff fa13 	bl	80002de <_close>
 8000eb8:	1c43      	adds	r3, r0, #1
 8000eba:	d102      	bne.n	8000ec2 <_close_r+0x1a>
 8000ebc:	682b      	ldr	r3, [r5, #0]
 8000ebe:	b103      	cbz	r3, 8000ec2 <_close_r+0x1a>
 8000ec0:	6023      	str	r3, [r4, #0]
 8000ec2:	bd38      	pop	{r3, r4, r5, pc}
 8000ec4:	20000098 	.word	0x20000098

08000ec8 <_fstat_r>:
 8000ec8:	b538      	push	{r3, r4, r5, lr}
 8000eca:	4d07      	ldr	r5, [pc, #28]	; (8000ee8 <_fstat_r+0x20>)
 8000ecc:	2300      	movs	r3, #0
 8000ece:	4604      	mov	r4, r0
 8000ed0:	4608      	mov	r0, r1
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	602b      	str	r3, [r5, #0]
 8000ed6:	f7ff fa0e 	bl	80002f6 <_fstat>
 8000eda:	1c43      	adds	r3, r0, #1
 8000edc:	d102      	bne.n	8000ee4 <_fstat_r+0x1c>
 8000ede:	682b      	ldr	r3, [r5, #0]
 8000ee0:	b103      	cbz	r3, 8000ee4 <_fstat_r+0x1c>
 8000ee2:	6023      	str	r3, [r4, #0]
 8000ee4:	bd38      	pop	{r3, r4, r5, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000098 	.word	0x20000098

08000eec <_isatty_r>:
 8000eec:	b538      	push	{r3, r4, r5, lr}
 8000eee:	4d06      	ldr	r5, [pc, #24]	; (8000f08 <_isatty_r+0x1c>)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	4604      	mov	r4, r0
 8000ef4:	4608      	mov	r0, r1
 8000ef6:	602b      	str	r3, [r5, #0]
 8000ef8:	f7ff fa0d 	bl	8000316 <_isatty>
 8000efc:	1c43      	adds	r3, r0, #1
 8000efe:	d102      	bne.n	8000f06 <_isatty_r+0x1a>
 8000f00:	682b      	ldr	r3, [r5, #0]
 8000f02:	b103      	cbz	r3, 8000f06 <_isatty_r+0x1a>
 8000f04:	6023      	str	r3, [r4, #0]
 8000f06:	bd38      	pop	{r3, r4, r5, pc}
 8000f08:	20000098 	.word	0x20000098

08000f0c <_lseek_r>:
 8000f0c:	b538      	push	{r3, r4, r5, lr}
 8000f0e:	4d07      	ldr	r5, [pc, #28]	; (8000f2c <_lseek_r+0x20>)
 8000f10:	4604      	mov	r4, r0
 8000f12:	4608      	mov	r0, r1
 8000f14:	4611      	mov	r1, r2
 8000f16:	2200      	movs	r2, #0
 8000f18:	602a      	str	r2, [r5, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	f7ff fa06 	bl	800032c <_lseek>
 8000f20:	1c43      	adds	r3, r0, #1
 8000f22:	d102      	bne.n	8000f2a <_lseek_r+0x1e>
 8000f24:	682b      	ldr	r3, [r5, #0]
 8000f26:	b103      	cbz	r3, 8000f2a <_lseek_r+0x1e>
 8000f28:	6023      	str	r3, [r4, #0]
 8000f2a:	bd38      	pop	{r3, r4, r5, pc}
 8000f2c:	20000098 	.word	0x20000098

08000f30 <__malloc_lock>:
 8000f30:	4801      	ldr	r0, [pc, #4]	; (8000f38 <__malloc_lock+0x8>)
 8000f32:	f7ff be43 	b.w	8000bbc <__retarget_lock_acquire_recursive>
 8000f36:	bf00      	nop
 8000f38:	20000091 	.word	0x20000091

08000f3c <__malloc_unlock>:
 8000f3c:	4801      	ldr	r0, [pc, #4]	; (8000f44 <__malloc_unlock+0x8>)
 8000f3e:	f7ff be3e 	b.w	8000bbe <__retarget_lock_release_recursive>
 8000f42:	bf00      	nop
 8000f44:	20000091 	.word	0x20000091

08000f48 <_read_r>:
 8000f48:	b538      	push	{r3, r4, r5, lr}
 8000f4a:	4d07      	ldr	r5, [pc, #28]	; (8000f68 <_read_r+0x20>)
 8000f4c:	4604      	mov	r4, r0
 8000f4e:	4608      	mov	r0, r1
 8000f50:	4611      	mov	r1, r2
 8000f52:	2200      	movs	r2, #0
 8000f54:	602a      	str	r2, [r5, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	f7ff f988 	bl	800026c <_read>
 8000f5c:	1c43      	adds	r3, r0, #1
 8000f5e:	d102      	bne.n	8000f66 <_read_r+0x1e>
 8000f60:	682b      	ldr	r3, [r5, #0]
 8000f62:	b103      	cbz	r3, 8000f66 <_read_r+0x1e>
 8000f64:	6023      	str	r3, [r4, #0]
 8000f66:	bd38      	pop	{r3, r4, r5, pc}
 8000f68:	20000098 	.word	0x20000098

08000f6c <_init>:
 8000f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f6e:	bf00      	nop
 8000f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f72:	bc08      	pop	{r3}
 8000f74:	469e      	mov	lr, r3
 8000f76:	4770      	bx	lr

08000f78 <_fini>:
 8000f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f7a:	bf00      	nop
 8000f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f7e:	bc08      	pop	{r3}
 8000f80:	469e      	mov	lr, r3
 8000f82:	4770      	bx	lr
