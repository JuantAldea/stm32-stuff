
019_timer_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000eac  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08001054  08001054  00011054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010d0  080010d0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080010d0  080010d0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010d0  080010d0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010d0  080010d0  000110d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010d4  080010d4  000110d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080010d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  0800113c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  0800113c  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001981  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000656  00000000  00000000  00021a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000198  00000000  00000000  00022070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000140  00000000  00000000  00022208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002144  00000000  00000000  00022348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002057  00000000  00000000  0002448c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d915  00000000  00000000  000264e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b3df8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b88  00000000  00000000  000b3e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000064 	.word	0x20000064
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800103c 	.word	0x0800103c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000068 	.word	0x20000068
 80001e4:	0800103c 	.word	0x0800103c

080001e8 <main>:

#define LED1_PIN GPIO_ODR_OD6
#define LED2_PIN GPIO_ODR_OD7
uint32_t asd;
int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001ec:	4b0c      	ldr	r3, [pc, #48]	; (8000220 <main+0x38>)
 80001ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f0:	4a0b      	ldr	r2, [pc, #44]	; (8000220 <main+0x38>)
 80001f2:	f043 0301 	orr.w	r3, r3, #1
 80001f6:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= GPIO_MODER_MODER6_0;
 80001f8:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <main+0x3c>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a09      	ldr	r2, [pc, #36]	; (8000224 <main+0x3c>)
 80001fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000202:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER7_0;
 8000204:	4b07      	ldr	r3, [pc, #28]	; (8000224 <main+0x3c>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a06      	ldr	r2, [pc, #24]	; (8000224 <main+0x3c>)
 800020a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800020e:	6013      	str	r3, [r2, #0]

	uart1_rx_tx_init();
 8000210:	f000 f922 	bl	8000458 <uart1_rx_tx_init>
	printf("%s\n", __FUNCTION__);
 8000214:	4804      	ldr	r0, [pc, #16]	; (8000228 <main+0x40>)
 8000216:	f000 fa81 	bl	800071c <puts>
	tim2_1hz_interrupt_init();
 800021a:	f000 f8ef 	bl	80003fc <tim2_1hz_interrupt_init>
	while (1) {
 800021e:	e7fe      	b.n	800021e <main+0x36>
 8000220:	40023800 	.word	0x40023800
 8000224:	40020000 	.word	0x40020000
 8000228:	08001064 	.word	0x08001064

0800022c <tim2_callback>:
		;
	}
}

void tim2_callback(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= LED1_PIN;
 8000230:	4b08      	ldr	r3, [pc, #32]	; (8000254 <tim2_callback+0x28>)
 8000232:	695b      	ldr	r3, [r3, #20]
 8000234:	4a07      	ldr	r2, [pc, #28]	; (8000254 <tim2_callback+0x28>)
 8000236:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 800023a:	6153      	str	r3, [r2, #20]
	GPIOA->ODR ^= LED2_PIN;
 800023c:	4b05      	ldr	r3, [pc, #20]	; (8000254 <tim2_callback+0x28>)
 800023e:	695b      	ldr	r3, [r3, #20]
 8000240:	4a04      	ldr	r2, [pc, #16]	; (8000254 <tim2_callback+0x28>)
 8000242:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8000246:	6153      	str	r3, [r2, #20]
	printf("A second passed\n");
 8000248:	4803      	ldr	r0, [pc, #12]	; (8000258 <tim2_callback+0x2c>)
 800024a:	f000 fa67 	bl	800071c <puts>
}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40020000 	.word	0x40020000
 8000258:	08001054 	.word	0x08001054

0800025c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	tim2_callback();
 8000260:	f7ff ffe4 	bl	800022c <tim2_callback>
	TIM2->SR &= ~TIM_SR_UIF;
 8000264:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000268:	691b      	ldr	r3, [r3, #16]
 800026a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800026e:	f023 0301 	bic.w	r3, r3, #1
 8000272:	6113      	str	r3, [r2, #16]
}
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}

08000278 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b086      	sub	sp, #24
 800027c:	af00      	add	r7, sp, #0
 800027e:	60f8      	str	r0, [r7, #12]
 8000280:	60b9      	str	r1, [r7, #8]
 8000282:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000284:	2300      	movs	r3, #0
 8000286:	617b      	str	r3, [r7, #20]
 8000288:	e00a      	b.n	80002a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800028a:	f3af 8000 	nop.w
 800028e:	4601      	mov	r1, r0
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	1c5a      	adds	r2, r3, #1
 8000294:	60ba      	str	r2, [r7, #8]
 8000296:	b2ca      	uxtb	r2, r1
 8000298:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800029a:	697b      	ldr	r3, [r7, #20]
 800029c:	3301      	adds	r3, #1
 800029e:	617b      	str	r3, [r7, #20]
 80002a0:	697a      	ldr	r2, [r7, #20]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	dbf0      	blt.n	800028a <_read+0x12>
	}

return len;
 80002a8:	687b      	ldr	r3, [r7, #4]
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	3718      	adds	r7, #24
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002b2:	b580      	push	{r7, lr}
 80002b4:	b086      	sub	sp, #24
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	60f8      	str	r0, [r7, #12]
 80002ba:	60b9      	str	r1, [r7, #8]
 80002bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]
 80002c2:	e009      	b.n	80002d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	1c5a      	adds	r2, r3, #1
 80002c8:	60ba      	str	r2, [r7, #8]
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 f94b 	bl	8000568 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	3301      	adds	r3, #1
 80002d6:	617b      	str	r3, [r7, #20]
 80002d8:	697a      	ldr	r2, [r7, #20]
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	429a      	cmp	r2, r3
 80002de:	dbf1      	blt.n	80002c4 <_write+0x12>
	}
	return len;
 80002e0:	687b      	ldr	r3, [r7, #4]
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	3718      	adds	r7, #24
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}

080002ea <_close>:

int _close(int file)
{
 80002ea:	b480      	push	{r7}
 80002ec:	b083      	sub	sp, #12
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	6078      	str	r0, [r7, #4]
	return -1;
 80002f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80002f6:	4618      	mov	r0, r3
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr

08000302 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000302:	b480      	push	{r7}
 8000304:	b083      	sub	sp, #12
 8000306:	af00      	add	r7, sp, #0
 8000308:	6078      	str	r0, [r7, #4]
 800030a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000312:	605a      	str	r2, [r3, #4]
	return 0;
 8000314:	2300      	movs	r3, #0
}
 8000316:	4618      	mov	r0, r3
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr

08000322 <_isatty>:

int _isatty(int file)
{
 8000322:	b480      	push	{r7}
 8000324:	b083      	sub	sp, #12
 8000326:	af00      	add	r7, sp, #0
 8000328:	6078      	str	r0, [r7, #4]
	return 1;
 800032a:	2301      	movs	r3, #1
}
 800032c:	4618      	mov	r0, r3
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
	return 0;
 8000344:	2300      	movs	r3, #0
}
 8000346:	4618      	mov	r0, r3
 8000348:	3714      	adds	r7, #20
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
	...

08000354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b086      	sub	sp, #24
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800035c:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <_sbrk+0x5c>)
 800035e:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <_sbrk+0x60>)
 8000360:	1ad3      	subs	r3, r2, r3
 8000362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000368:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <_sbrk+0x64>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d102      	bne.n	8000376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000370:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <_sbrk+0x64>)
 8000372:	4a12      	ldr	r2, [pc, #72]	; (80003bc <_sbrk+0x68>)
 8000374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000376:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <_sbrk+0x64>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4413      	add	r3, r2
 800037e:	693a      	ldr	r2, [r7, #16]
 8000380:	429a      	cmp	r2, r3
 8000382:	d207      	bcs.n	8000394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000384:	f000 f92a 	bl	80005dc <__errno>
 8000388:	4603      	mov	r3, r0
 800038a:	220c      	movs	r2, #12
 800038c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800038e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000392:	e009      	b.n	80003a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000394:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <_sbrk+0x64>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800039a:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <_sbrk+0x64>)
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4413      	add	r3, r2
 80003a2:	4a05      	ldr	r2, [pc, #20]	; (80003b8 <_sbrk+0x64>)
 80003a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003a6:	68fb      	ldr	r3, [r7, #12]
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3718      	adds	r7, #24
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20020000 	.word	0x20020000
 80003b4:	00000400 	.word	0x00000400
 80003b8:	20000080 	.word	0x20000080
 80003bc:	20000098 	.word	0x20000098

080003c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db0b      	blt.n	80003ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	f003 021f 	and.w	r2, r3, #31
 80003d8:	4907      	ldr	r1, [pc, #28]	; (80003f8 <__NVIC_EnableIRQ+0x38>)
 80003da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003de:	095b      	lsrs	r3, r3, #5
 80003e0:	2001      	movs	r0, #1
 80003e2:	fa00 f202 	lsl.w	r2, r0, r2
 80003e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003ea:	bf00      	nop
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	e000e100 	.word	0xe000e100

080003fc <tim2_1hz_interrupt_init>:
	//enable
	TIM2->CR1 |= TIM_CR1_CEN;
}

void tim2_1hz_interrupt_init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	// clock access
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000400:	4b14      	ldr	r3, [pc, #80]	; (8000454 <tim2_1hz_interrupt_init+0x58>)
 8000402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000404:	4a13      	ldr	r2, [pc, #76]	; (8000454 <tim2_1hz_interrupt_init+0x58>)
 8000406:	f043 0301 	orr.w	r3, r3, #1
 800040a:	6413      	str	r3, [r2, #64]	; 0x40
	// prescaler
	TIM2->PSC = 1600 - 1; // 16 000 000Hz / 1600 = 10.000Hz
 800040c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000410:	f240 623f 	movw	r2, #1599	; 0x63f
 8000414:	629a      	str	r2, [r3, #40]	; 0x28
	// autoreload
	TIM2->ARR = 10000 - 1; // 10.000/10.000 = 1Hz
 8000416:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800041a:	f242 720f 	movw	r2, #9999	; 0x270f
 800041e:	62da      	str	r2, [r3, #44]	; 0x2c
	// clear
	TIM2->CNT = 0;
 8000420:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000424:	2200      	movs	r2, #0
 8000426:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->DIER |= TIM_DIER_UIE;
 8000428:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800042c:	68db      	ldr	r3, [r3, #12]
 800042e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000432:	f043 0301 	orr.w	r3, r3, #1
 8000436:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(TIM2_IRQn);
 8000438:	201c      	movs	r0, #28
 800043a:	f7ff ffc1 	bl	80003c0 <__NVIC_EnableIRQ>
	//enable
	TIM2->CR1 |= TIM_CR1_CEN;
 800043e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000448:	f043 0301 	orr.w	r3, r3, #1
 800044c:	6013      	str	r3, [r2, #0]
}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40023800 	.word	0x40023800

08000458 <uart1_rx_tx_init>:
#define APB1_CLK SYS_FREQ

static void set_uart_baudrate(USART_TypeDef *USARTx, uint32_t perif_clk, uint32_t baudrate);
static uint16_t compute_uart_bd(uint32_t perif_clk, uint32_t baudrate);

void uart1_rx_tx_init() {
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
	//UART1_TX -> PA9
	// pass clock to GPIO_A
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800045c:	4b1d      	ldr	r3, [pc, #116]	; (80004d4 <uart1_rx_tx_init+0x7c>)
 800045e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000460:	4a1c      	ldr	r2, [pc, #112]	; (80004d4 <uart1_rx_tx_init+0x7c>)
 8000462:	f043 0301 	orr.w	r3, r3, #1
 8000466:	6313      	str	r3, [r2, #48]	; 0x30
	//pass clock to USART1
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000468:	4b1a      	ldr	r3, [pc, #104]	; (80004d4 <uart1_rx_tx_init+0x7c>)
 800046a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800046c:	4a19      	ldr	r2, [pc, #100]	; (80004d4 <uart1_rx_tx_init+0x7c>)
 800046e:	f043 0310 	orr.w	r3, r3, #16
 8000472:	6453      	str	r3, [r2, #68]	; 0x44

	//set mode to alternate function
	GPIOA->MODER &= ~GPIO_MODER_MODER9;
 8000474:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <uart1_rx_tx_init+0x80>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a17      	ldr	r2, [pc, #92]	; (80004d8 <uart1_rx_tx_init+0x80>)
 800047a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800047e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER9_1;
 8000480:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <uart1_rx_tx_init+0x80>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a14      	ldr	r2, [pc, #80]	; (80004d8 <uart1_rx_tx_init+0x80>)
 8000486:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800048a:	6013      	str	r3, [r2, #0]

	GPIOA->MODER &= ~GPIO_MODER_MODER10;
 800048c:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <uart1_rx_tx_init+0x80>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a11      	ldr	r2, [pc, #68]	; (80004d8 <uart1_rx_tx_init+0x80>)
 8000492:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000496:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER10_1;
 8000498:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <uart1_rx_tx_init+0x80>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a0e      	ldr	r2, [pc, #56]	; (80004d8 <uart1_rx_tx_init+0x80>)
 800049e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004a2:	6013      	str	r3, [r2, #0]

	// set alternate function to USART_TX AF07 (0111 -> 0x7 :D)
	GPIOA->AFR[1] |= GPIO_AFRH_AFSEL9_2 | GPIO_AFRH_AFSEL9_1 | GPIO_AFRH_AFSEL9_0;
 80004a4:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <uart1_rx_tx_init+0x80>)
 80004a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004a8:	4a0b      	ldr	r2, [pc, #44]	; (80004d8 <uart1_rx_tx_init+0x80>)
 80004aa:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80004ae:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= GPIO_AFRH_AFSEL10_2 | GPIO_AFRH_AFSEL10_1 | GPIO_AFRH_AFSEL10_0;
 80004b0:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <uart1_rx_tx_init+0x80>)
 80004b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004b4:	4a08      	ldr	r2, [pc, #32]	; (80004d8 <uart1_rx_tx_init+0x80>)
 80004b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80004ba:	6253      	str	r3, [r2, #36]	; 0x24
	// configure UART module
	// baud rate
	set_uart_baudrate(USART1, APB1_CLK, UART_BAUDRATE);
 80004bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004c0:	4906      	ldr	r1, [pc, #24]	; (80004dc <uart1_rx_tx_init+0x84>)
 80004c2:	4807      	ldr	r0, [pc, #28]	; (80004e0 <uart1_rx_tx_init+0x88>)
 80004c4:	f000 f83e 	bl	8000544 <set_uart_baudrate>
	// transfer direction & enable UART module
	USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <uart1_rx_tx_init+0x88>)
 80004ca:	f242 020c 	movw	r2, #8204	; 0x200c
 80004ce:	60da      	str	r2, [r3, #12]
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40023800 	.word	0x40023800
 80004d8:	40020000 	.word	0x40020000
 80004dc:	00f42400 	.word	0x00f42400
 80004e0:	40011000 	.word	0x40011000

080004e4 <uart_write>:

	}
	return uartx->DR;
}

void uart_write(USART_TypeDef *uartx, int ch) {
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
	// ensure transmit data register is empty
	while (!(uartx->SR & USART_SR_TXE)) {
 80004ee:	bf00      	nop
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d0f9      	beq.n	80004f0 <uart_write+0xc>

	}
	// write to transmit data register
	uartx->DR = ch;
 80004fc:	683a      	ldr	r2, [r7, #0]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	605a      	str	r2, [r3, #4]

	while (!(uartx->SR & USART_SR_TXE)) {
 8000502:	bf00      	nop
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050c:	2b00      	cmp	r3, #0
 800050e:	d0f9      	beq.n	8000504 <uart_write+0x20>
	}
}
 8000510:	bf00      	nop
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr

0800051e <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t perif_clk, uint32_t baudrate) {
 800051e:	b480      	push	{r7}
 8000520:	b083      	sub	sp, #12
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
 8000526:	6039      	str	r1, [r7, #0]

	//USARTx->BRR = (8 << 4) | 11;

	// integer round up equivalent to round(x.y) = X.Y + 0.5
	// CLK/BR + 1/2
	return (perif_clk + (baudrate / 2U)) / baudrate;
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	085a      	lsrs	r2, r3, #1
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	441a      	add	r2, r3
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	fbb2 f3f3 	udiv	r3, r2, r3
 8000536:	b29b      	uxth	r3, r3
}
 8000538:	4618      	mov	r0, r3
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <set_uart_baudrate>:

static void set_uart_baudrate(USART_TypeDef *USARTx, uint32_t perif_clk, uint32_t baudrate) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]

	USARTx->BRR = compute_uart_bd(perif_clk, baudrate);
 8000550:	6879      	ldr	r1, [r7, #4]
 8000552:	68b8      	ldr	r0, [r7, #8]
 8000554:	f7ff ffe3 	bl	800051e <compute_uart_bd>
 8000558:	4603      	mov	r3, r0
 800055a:	461a      	mov	r2, r3
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	609a      	str	r2, [r3, #8]
}
 8000560:	bf00      	nop
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <__io_putchar>:

int __io_putchar(int ch) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	uart_write(USART1, ch);
 8000570:	6879      	ldr	r1, [r7, #4]
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <__io_putchar+0x1c>)
 8000574:	f7ff ffb6 	bl	80004e4 <uart_write>
	return ch;
 8000578:	687b      	ldr	r3, [r7, #4]
}
 800057a:	4618      	mov	r0, r3
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40011000 	.word	0x40011000

08000588 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000588:	480d      	ldr	r0, [pc, #52]	; (80005c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800058a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800058c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000590:	480c      	ldr	r0, [pc, #48]	; (80005c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000592:	490d      	ldr	r1, [pc, #52]	; (80005c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000594:	4a0d      	ldr	r2, [pc, #52]	; (80005cc <LoopForever+0xe>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000598:	e002      	b.n	80005a0 <LoopCopyDataInit>

0800059a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800059c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059e:	3304      	adds	r3, #4

080005a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a4:	d3f9      	bcc.n	800059a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a6:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005a8:	4c0a      	ldr	r4, [pc, #40]	; (80005d4 <LoopForever+0x16>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005ac:	e001      	b.n	80005b2 <LoopFillZerobss>

080005ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b0:	3204      	adds	r2, #4

080005b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b4:	d3fb      	bcc.n	80005ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005b6:	f000 f817 	bl	80005e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ba:	f7ff fe15 	bl	80001e8 <main>

080005be <LoopForever>:

LoopForever:
    b LoopForever
 80005be:	e7fe      	b.n	80005be <LoopForever>
  ldr   r0, =_estack
 80005c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80005cc:	080010d8 	.word	0x080010d8
  ldr r2, =_sbss
 80005d0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80005d4:	20000094 	.word	0x20000094

080005d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d8:	e7fe      	b.n	80005d8 <ADC_IRQHandler>
	...

080005dc <__errno>:
 80005dc:	4b01      	ldr	r3, [pc, #4]	; (80005e4 <__errno+0x8>)
 80005de:	6818      	ldr	r0, [r3, #0]
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000000 	.word	0x20000000

080005e8 <__libc_init_array>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	4d0d      	ldr	r5, [pc, #52]	; (8000620 <__libc_init_array+0x38>)
 80005ec:	4c0d      	ldr	r4, [pc, #52]	; (8000624 <__libc_init_array+0x3c>)
 80005ee:	1b64      	subs	r4, r4, r5
 80005f0:	10a4      	asrs	r4, r4, #2
 80005f2:	2600      	movs	r6, #0
 80005f4:	42a6      	cmp	r6, r4
 80005f6:	d109      	bne.n	800060c <__libc_init_array+0x24>
 80005f8:	4d0b      	ldr	r5, [pc, #44]	; (8000628 <__libc_init_array+0x40>)
 80005fa:	4c0c      	ldr	r4, [pc, #48]	; (800062c <__libc_init_array+0x44>)
 80005fc:	f000 fd1e 	bl	800103c <_init>
 8000600:	1b64      	subs	r4, r4, r5
 8000602:	10a4      	asrs	r4, r4, #2
 8000604:	2600      	movs	r6, #0
 8000606:	42a6      	cmp	r6, r4
 8000608:	d105      	bne.n	8000616 <__libc_init_array+0x2e>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000610:	4798      	blx	r3
 8000612:	3601      	adds	r6, #1
 8000614:	e7ee      	b.n	80005f4 <__libc_init_array+0xc>
 8000616:	f855 3b04 	ldr.w	r3, [r5], #4
 800061a:	4798      	blx	r3
 800061c:	3601      	adds	r6, #1
 800061e:	e7f2      	b.n	8000606 <__libc_init_array+0x1e>
 8000620:	080010d0 	.word	0x080010d0
 8000624:	080010d0 	.word	0x080010d0
 8000628:	080010d0 	.word	0x080010d0
 800062c:	080010d4 	.word	0x080010d4

08000630 <memset>:
 8000630:	4402      	add	r2, r0
 8000632:	4603      	mov	r3, r0
 8000634:	4293      	cmp	r3, r2
 8000636:	d100      	bne.n	800063a <memset+0xa>
 8000638:	4770      	bx	lr
 800063a:	f803 1b01 	strb.w	r1, [r3], #1
 800063e:	e7f9      	b.n	8000634 <memset+0x4>

08000640 <_puts_r>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	460e      	mov	r6, r1
 8000644:	4605      	mov	r5, r0
 8000646:	b118      	cbz	r0, 8000650 <_puts_r+0x10>
 8000648:	6983      	ldr	r3, [r0, #24]
 800064a:	b90b      	cbnz	r3, 8000650 <_puts_r+0x10>
 800064c:	f000 fa48 	bl	8000ae0 <__sinit>
 8000650:	69ab      	ldr	r3, [r5, #24]
 8000652:	68ac      	ldr	r4, [r5, #8]
 8000654:	b913      	cbnz	r3, 800065c <_puts_r+0x1c>
 8000656:	4628      	mov	r0, r5
 8000658:	f000 fa42 	bl	8000ae0 <__sinit>
 800065c:	4b2c      	ldr	r3, [pc, #176]	; (8000710 <_puts_r+0xd0>)
 800065e:	429c      	cmp	r4, r3
 8000660:	d120      	bne.n	80006a4 <_puts_r+0x64>
 8000662:	686c      	ldr	r4, [r5, #4]
 8000664:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000666:	07db      	lsls	r3, r3, #31
 8000668:	d405      	bmi.n	8000676 <_puts_r+0x36>
 800066a:	89a3      	ldrh	r3, [r4, #12]
 800066c:	0598      	lsls	r0, r3, #22
 800066e:	d402      	bmi.n	8000676 <_puts_r+0x36>
 8000670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000672:	f000 fad3 	bl	8000c1c <__retarget_lock_acquire_recursive>
 8000676:	89a3      	ldrh	r3, [r4, #12]
 8000678:	0719      	lsls	r1, r3, #28
 800067a:	d51d      	bpl.n	80006b8 <_puts_r+0x78>
 800067c:	6923      	ldr	r3, [r4, #16]
 800067e:	b1db      	cbz	r3, 80006b8 <_puts_r+0x78>
 8000680:	3e01      	subs	r6, #1
 8000682:	68a3      	ldr	r3, [r4, #8]
 8000684:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000688:	3b01      	subs	r3, #1
 800068a:	60a3      	str	r3, [r4, #8]
 800068c:	bb39      	cbnz	r1, 80006de <_puts_r+0x9e>
 800068e:	2b00      	cmp	r3, #0
 8000690:	da38      	bge.n	8000704 <_puts_r+0xc4>
 8000692:	4622      	mov	r2, r4
 8000694:	210a      	movs	r1, #10
 8000696:	4628      	mov	r0, r5
 8000698:	f000 f848 	bl	800072c <__swbuf_r>
 800069c:	3001      	adds	r0, #1
 800069e:	d011      	beq.n	80006c4 <_puts_r+0x84>
 80006a0:	250a      	movs	r5, #10
 80006a2:	e011      	b.n	80006c8 <_puts_r+0x88>
 80006a4:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <_puts_r+0xd4>)
 80006a6:	429c      	cmp	r4, r3
 80006a8:	d101      	bne.n	80006ae <_puts_r+0x6e>
 80006aa:	68ac      	ldr	r4, [r5, #8]
 80006ac:	e7da      	b.n	8000664 <_puts_r+0x24>
 80006ae:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <_puts_r+0xd8>)
 80006b0:	429c      	cmp	r4, r3
 80006b2:	bf08      	it	eq
 80006b4:	68ec      	ldreq	r4, [r5, #12]
 80006b6:	e7d5      	b.n	8000664 <_puts_r+0x24>
 80006b8:	4621      	mov	r1, r4
 80006ba:	4628      	mov	r0, r5
 80006bc:	f000 f888 	bl	80007d0 <__swsetup_r>
 80006c0:	2800      	cmp	r0, #0
 80006c2:	d0dd      	beq.n	8000680 <_puts_r+0x40>
 80006c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80006c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80006ca:	07da      	lsls	r2, r3, #31
 80006cc:	d405      	bmi.n	80006da <_puts_r+0x9a>
 80006ce:	89a3      	ldrh	r3, [r4, #12]
 80006d0:	059b      	lsls	r3, r3, #22
 80006d2:	d402      	bmi.n	80006da <_puts_r+0x9a>
 80006d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80006d6:	f000 faa2 	bl	8000c1e <__retarget_lock_release_recursive>
 80006da:	4628      	mov	r0, r5
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	2b00      	cmp	r3, #0
 80006e0:	da04      	bge.n	80006ec <_puts_r+0xac>
 80006e2:	69a2      	ldr	r2, [r4, #24]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	dc06      	bgt.n	80006f6 <_puts_r+0xb6>
 80006e8:	290a      	cmp	r1, #10
 80006ea:	d004      	beq.n	80006f6 <_puts_r+0xb6>
 80006ec:	6823      	ldr	r3, [r4, #0]
 80006ee:	1c5a      	adds	r2, r3, #1
 80006f0:	6022      	str	r2, [r4, #0]
 80006f2:	7019      	strb	r1, [r3, #0]
 80006f4:	e7c5      	b.n	8000682 <_puts_r+0x42>
 80006f6:	4622      	mov	r2, r4
 80006f8:	4628      	mov	r0, r5
 80006fa:	f000 f817 	bl	800072c <__swbuf_r>
 80006fe:	3001      	adds	r0, #1
 8000700:	d1bf      	bne.n	8000682 <_puts_r+0x42>
 8000702:	e7df      	b.n	80006c4 <_puts_r+0x84>
 8000704:	6823      	ldr	r3, [r4, #0]
 8000706:	250a      	movs	r5, #10
 8000708:	1c5a      	adds	r2, r3, #1
 800070a:	6022      	str	r2, [r4, #0]
 800070c:	701d      	strb	r5, [r3, #0]
 800070e:	e7db      	b.n	80006c8 <_puts_r+0x88>
 8000710:	08001090 	.word	0x08001090
 8000714:	080010b0 	.word	0x080010b0
 8000718:	08001070 	.word	0x08001070

0800071c <puts>:
 800071c:	4b02      	ldr	r3, [pc, #8]	; (8000728 <puts+0xc>)
 800071e:	4601      	mov	r1, r0
 8000720:	6818      	ldr	r0, [r3, #0]
 8000722:	f7ff bf8d 	b.w	8000640 <_puts_r>
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000

0800072c <__swbuf_r>:
 800072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800072e:	460e      	mov	r6, r1
 8000730:	4614      	mov	r4, r2
 8000732:	4605      	mov	r5, r0
 8000734:	b118      	cbz	r0, 800073e <__swbuf_r+0x12>
 8000736:	6983      	ldr	r3, [r0, #24]
 8000738:	b90b      	cbnz	r3, 800073e <__swbuf_r+0x12>
 800073a:	f000 f9d1 	bl	8000ae0 <__sinit>
 800073e:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <__swbuf_r+0x98>)
 8000740:	429c      	cmp	r4, r3
 8000742:	d12b      	bne.n	800079c <__swbuf_r+0x70>
 8000744:	686c      	ldr	r4, [r5, #4]
 8000746:	69a3      	ldr	r3, [r4, #24]
 8000748:	60a3      	str	r3, [r4, #8]
 800074a:	89a3      	ldrh	r3, [r4, #12]
 800074c:	071a      	lsls	r2, r3, #28
 800074e:	d52f      	bpl.n	80007b0 <__swbuf_r+0x84>
 8000750:	6923      	ldr	r3, [r4, #16]
 8000752:	b36b      	cbz	r3, 80007b0 <__swbuf_r+0x84>
 8000754:	6923      	ldr	r3, [r4, #16]
 8000756:	6820      	ldr	r0, [r4, #0]
 8000758:	1ac0      	subs	r0, r0, r3
 800075a:	6963      	ldr	r3, [r4, #20]
 800075c:	b2f6      	uxtb	r6, r6
 800075e:	4283      	cmp	r3, r0
 8000760:	4637      	mov	r7, r6
 8000762:	dc04      	bgt.n	800076e <__swbuf_r+0x42>
 8000764:	4621      	mov	r1, r4
 8000766:	4628      	mov	r0, r5
 8000768:	f000 f926 	bl	80009b8 <_fflush_r>
 800076c:	bb30      	cbnz	r0, 80007bc <__swbuf_r+0x90>
 800076e:	68a3      	ldr	r3, [r4, #8]
 8000770:	3b01      	subs	r3, #1
 8000772:	60a3      	str	r3, [r4, #8]
 8000774:	6823      	ldr	r3, [r4, #0]
 8000776:	1c5a      	adds	r2, r3, #1
 8000778:	6022      	str	r2, [r4, #0]
 800077a:	701e      	strb	r6, [r3, #0]
 800077c:	6963      	ldr	r3, [r4, #20]
 800077e:	3001      	adds	r0, #1
 8000780:	4283      	cmp	r3, r0
 8000782:	d004      	beq.n	800078e <__swbuf_r+0x62>
 8000784:	89a3      	ldrh	r3, [r4, #12]
 8000786:	07db      	lsls	r3, r3, #31
 8000788:	d506      	bpl.n	8000798 <__swbuf_r+0x6c>
 800078a:	2e0a      	cmp	r6, #10
 800078c:	d104      	bne.n	8000798 <__swbuf_r+0x6c>
 800078e:	4621      	mov	r1, r4
 8000790:	4628      	mov	r0, r5
 8000792:	f000 f911 	bl	80009b8 <_fflush_r>
 8000796:	b988      	cbnz	r0, 80007bc <__swbuf_r+0x90>
 8000798:	4638      	mov	r0, r7
 800079a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <__swbuf_r+0x9c>)
 800079e:	429c      	cmp	r4, r3
 80007a0:	d101      	bne.n	80007a6 <__swbuf_r+0x7a>
 80007a2:	68ac      	ldr	r4, [r5, #8]
 80007a4:	e7cf      	b.n	8000746 <__swbuf_r+0x1a>
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <__swbuf_r+0xa0>)
 80007a8:	429c      	cmp	r4, r3
 80007aa:	bf08      	it	eq
 80007ac:	68ec      	ldreq	r4, [r5, #12]
 80007ae:	e7ca      	b.n	8000746 <__swbuf_r+0x1a>
 80007b0:	4621      	mov	r1, r4
 80007b2:	4628      	mov	r0, r5
 80007b4:	f000 f80c 	bl	80007d0 <__swsetup_r>
 80007b8:	2800      	cmp	r0, #0
 80007ba:	d0cb      	beq.n	8000754 <__swbuf_r+0x28>
 80007bc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80007c0:	e7ea      	b.n	8000798 <__swbuf_r+0x6c>
 80007c2:	bf00      	nop
 80007c4:	08001090 	.word	0x08001090
 80007c8:	080010b0 	.word	0x080010b0
 80007cc:	08001070 	.word	0x08001070

080007d0 <__swsetup_r>:
 80007d0:	4b32      	ldr	r3, [pc, #200]	; (800089c <__swsetup_r+0xcc>)
 80007d2:	b570      	push	{r4, r5, r6, lr}
 80007d4:	681d      	ldr	r5, [r3, #0]
 80007d6:	4606      	mov	r6, r0
 80007d8:	460c      	mov	r4, r1
 80007da:	b125      	cbz	r5, 80007e6 <__swsetup_r+0x16>
 80007dc:	69ab      	ldr	r3, [r5, #24]
 80007de:	b913      	cbnz	r3, 80007e6 <__swsetup_r+0x16>
 80007e0:	4628      	mov	r0, r5
 80007e2:	f000 f97d 	bl	8000ae0 <__sinit>
 80007e6:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <__swsetup_r+0xd0>)
 80007e8:	429c      	cmp	r4, r3
 80007ea:	d10f      	bne.n	800080c <__swsetup_r+0x3c>
 80007ec:	686c      	ldr	r4, [r5, #4]
 80007ee:	89a3      	ldrh	r3, [r4, #12]
 80007f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80007f4:	0719      	lsls	r1, r3, #28
 80007f6:	d42c      	bmi.n	8000852 <__swsetup_r+0x82>
 80007f8:	06dd      	lsls	r5, r3, #27
 80007fa:	d411      	bmi.n	8000820 <__swsetup_r+0x50>
 80007fc:	2309      	movs	r3, #9
 80007fe:	6033      	str	r3, [r6, #0]
 8000800:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000804:	81a3      	strh	r3, [r4, #12]
 8000806:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800080a:	e03e      	b.n	800088a <__swsetup_r+0xba>
 800080c:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <__swsetup_r+0xd4>)
 800080e:	429c      	cmp	r4, r3
 8000810:	d101      	bne.n	8000816 <__swsetup_r+0x46>
 8000812:	68ac      	ldr	r4, [r5, #8]
 8000814:	e7eb      	b.n	80007ee <__swsetup_r+0x1e>
 8000816:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <__swsetup_r+0xd8>)
 8000818:	429c      	cmp	r4, r3
 800081a:	bf08      	it	eq
 800081c:	68ec      	ldreq	r4, [r5, #12]
 800081e:	e7e6      	b.n	80007ee <__swsetup_r+0x1e>
 8000820:	0758      	lsls	r0, r3, #29
 8000822:	d512      	bpl.n	800084a <__swsetup_r+0x7a>
 8000824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000826:	b141      	cbz	r1, 800083a <__swsetup_r+0x6a>
 8000828:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800082c:	4299      	cmp	r1, r3
 800082e:	d002      	beq.n	8000836 <__swsetup_r+0x66>
 8000830:	4630      	mov	r0, r6
 8000832:	f000 fa5b 	bl	8000cec <_free_r>
 8000836:	2300      	movs	r3, #0
 8000838:	6363      	str	r3, [r4, #52]	; 0x34
 800083a:	89a3      	ldrh	r3, [r4, #12]
 800083c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000840:	81a3      	strh	r3, [r4, #12]
 8000842:	2300      	movs	r3, #0
 8000844:	6063      	str	r3, [r4, #4]
 8000846:	6923      	ldr	r3, [r4, #16]
 8000848:	6023      	str	r3, [r4, #0]
 800084a:	89a3      	ldrh	r3, [r4, #12]
 800084c:	f043 0308 	orr.w	r3, r3, #8
 8000850:	81a3      	strh	r3, [r4, #12]
 8000852:	6923      	ldr	r3, [r4, #16]
 8000854:	b94b      	cbnz	r3, 800086a <__swsetup_r+0x9a>
 8000856:	89a3      	ldrh	r3, [r4, #12]
 8000858:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800085c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000860:	d003      	beq.n	800086a <__swsetup_r+0x9a>
 8000862:	4621      	mov	r1, r4
 8000864:	4630      	mov	r0, r6
 8000866:	f000 fa01 	bl	8000c6c <__smakebuf_r>
 800086a:	89a0      	ldrh	r0, [r4, #12]
 800086c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000870:	f010 0301 	ands.w	r3, r0, #1
 8000874:	d00a      	beq.n	800088c <__swsetup_r+0xbc>
 8000876:	2300      	movs	r3, #0
 8000878:	60a3      	str	r3, [r4, #8]
 800087a:	6963      	ldr	r3, [r4, #20]
 800087c:	425b      	negs	r3, r3
 800087e:	61a3      	str	r3, [r4, #24]
 8000880:	6923      	ldr	r3, [r4, #16]
 8000882:	b943      	cbnz	r3, 8000896 <__swsetup_r+0xc6>
 8000884:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000888:	d1ba      	bne.n	8000800 <__swsetup_r+0x30>
 800088a:	bd70      	pop	{r4, r5, r6, pc}
 800088c:	0781      	lsls	r1, r0, #30
 800088e:	bf58      	it	pl
 8000890:	6963      	ldrpl	r3, [r4, #20]
 8000892:	60a3      	str	r3, [r4, #8]
 8000894:	e7f4      	b.n	8000880 <__swsetup_r+0xb0>
 8000896:	2000      	movs	r0, #0
 8000898:	e7f7      	b.n	800088a <__swsetup_r+0xba>
 800089a:	bf00      	nop
 800089c:	20000000 	.word	0x20000000
 80008a0:	08001090 	.word	0x08001090
 80008a4:	080010b0 	.word	0x080010b0
 80008a8:	08001070 	.word	0x08001070

080008ac <__sflush_r>:
 80008ac:	898a      	ldrh	r2, [r1, #12]
 80008ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008b2:	4605      	mov	r5, r0
 80008b4:	0710      	lsls	r0, r2, #28
 80008b6:	460c      	mov	r4, r1
 80008b8:	d458      	bmi.n	800096c <__sflush_r+0xc0>
 80008ba:	684b      	ldr	r3, [r1, #4]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	dc05      	bgt.n	80008cc <__sflush_r+0x20>
 80008c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	dc02      	bgt.n	80008cc <__sflush_r+0x20>
 80008c6:	2000      	movs	r0, #0
 80008c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80008ce:	2e00      	cmp	r6, #0
 80008d0:	d0f9      	beq.n	80008c6 <__sflush_r+0x1a>
 80008d2:	2300      	movs	r3, #0
 80008d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80008d8:	682f      	ldr	r7, [r5, #0]
 80008da:	602b      	str	r3, [r5, #0]
 80008dc:	d032      	beq.n	8000944 <__sflush_r+0x98>
 80008de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80008e0:	89a3      	ldrh	r3, [r4, #12]
 80008e2:	075a      	lsls	r2, r3, #29
 80008e4:	d505      	bpl.n	80008f2 <__sflush_r+0x46>
 80008e6:	6863      	ldr	r3, [r4, #4]
 80008e8:	1ac0      	subs	r0, r0, r3
 80008ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80008ec:	b10b      	cbz	r3, 80008f2 <__sflush_r+0x46>
 80008ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008f0:	1ac0      	subs	r0, r0, r3
 80008f2:	2300      	movs	r3, #0
 80008f4:	4602      	mov	r2, r0
 80008f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80008f8:	6a21      	ldr	r1, [r4, #32]
 80008fa:	4628      	mov	r0, r5
 80008fc:	47b0      	blx	r6
 80008fe:	1c43      	adds	r3, r0, #1
 8000900:	89a3      	ldrh	r3, [r4, #12]
 8000902:	d106      	bne.n	8000912 <__sflush_r+0x66>
 8000904:	6829      	ldr	r1, [r5, #0]
 8000906:	291d      	cmp	r1, #29
 8000908:	d82c      	bhi.n	8000964 <__sflush_r+0xb8>
 800090a:	4a2a      	ldr	r2, [pc, #168]	; (80009b4 <__sflush_r+0x108>)
 800090c:	40ca      	lsrs	r2, r1
 800090e:	07d6      	lsls	r6, r2, #31
 8000910:	d528      	bpl.n	8000964 <__sflush_r+0xb8>
 8000912:	2200      	movs	r2, #0
 8000914:	6062      	str	r2, [r4, #4]
 8000916:	04d9      	lsls	r1, r3, #19
 8000918:	6922      	ldr	r2, [r4, #16]
 800091a:	6022      	str	r2, [r4, #0]
 800091c:	d504      	bpl.n	8000928 <__sflush_r+0x7c>
 800091e:	1c42      	adds	r2, r0, #1
 8000920:	d101      	bne.n	8000926 <__sflush_r+0x7a>
 8000922:	682b      	ldr	r3, [r5, #0]
 8000924:	b903      	cbnz	r3, 8000928 <__sflush_r+0x7c>
 8000926:	6560      	str	r0, [r4, #84]	; 0x54
 8000928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800092a:	602f      	str	r7, [r5, #0]
 800092c:	2900      	cmp	r1, #0
 800092e:	d0ca      	beq.n	80008c6 <__sflush_r+0x1a>
 8000930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000934:	4299      	cmp	r1, r3
 8000936:	d002      	beq.n	800093e <__sflush_r+0x92>
 8000938:	4628      	mov	r0, r5
 800093a:	f000 f9d7 	bl	8000cec <_free_r>
 800093e:	2000      	movs	r0, #0
 8000940:	6360      	str	r0, [r4, #52]	; 0x34
 8000942:	e7c1      	b.n	80008c8 <__sflush_r+0x1c>
 8000944:	6a21      	ldr	r1, [r4, #32]
 8000946:	2301      	movs	r3, #1
 8000948:	4628      	mov	r0, r5
 800094a:	47b0      	blx	r6
 800094c:	1c41      	adds	r1, r0, #1
 800094e:	d1c7      	bne.n	80008e0 <__sflush_r+0x34>
 8000950:	682b      	ldr	r3, [r5, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d0c4      	beq.n	80008e0 <__sflush_r+0x34>
 8000956:	2b1d      	cmp	r3, #29
 8000958:	d001      	beq.n	800095e <__sflush_r+0xb2>
 800095a:	2b16      	cmp	r3, #22
 800095c:	d101      	bne.n	8000962 <__sflush_r+0xb6>
 800095e:	602f      	str	r7, [r5, #0]
 8000960:	e7b1      	b.n	80008c6 <__sflush_r+0x1a>
 8000962:	89a3      	ldrh	r3, [r4, #12]
 8000964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000968:	81a3      	strh	r3, [r4, #12]
 800096a:	e7ad      	b.n	80008c8 <__sflush_r+0x1c>
 800096c:	690f      	ldr	r7, [r1, #16]
 800096e:	2f00      	cmp	r7, #0
 8000970:	d0a9      	beq.n	80008c6 <__sflush_r+0x1a>
 8000972:	0793      	lsls	r3, r2, #30
 8000974:	680e      	ldr	r6, [r1, #0]
 8000976:	bf08      	it	eq
 8000978:	694b      	ldreq	r3, [r1, #20]
 800097a:	600f      	str	r7, [r1, #0]
 800097c:	bf18      	it	ne
 800097e:	2300      	movne	r3, #0
 8000980:	eba6 0807 	sub.w	r8, r6, r7
 8000984:	608b      	str	r3, [r1, #8]
 8000986:	f1b8 0f00 	cmp.w	r8, #0
 800098a:	dd9c      	ble.n	80008c6 <__sflush_r+0x1a>
 800098c:	6a21      	ldr	r1, [r4, #32]
 800098e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000990:	4643      	mov	r3, r8
 8000992:	463a      	mov	r2, r7
 8000994:	4628      	mov	r0, r5
 8000996:	47b0      	blx	r6
 8000998:	2800      	cmp	r0, #0
 800099a:	dc06      	bgt.n	80009aa <__sflush_r+0xfe>
 800099c:	89a3      	ldrh	r3, [r4, #12]
 800099e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a2:	81a3      	strh	r3, [r4, #12]
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009a8:	e78e      	b.n	80008c8 <__sflush_r+0x1c>
 80009aa:	4407      	add	r7, r0
 80009ac:	eba8 0800 	sub.w	r8, r8, r0
 80009b0:	e7e9      	b.n	8000986 <__sflush_r+0xda>
 80009b2:	bf00      	nop
 80009b4:	20400001 	.word	0x20400001

080009b8 <_fflush_r>:
 80009b8:	b538      	push	{r3, r4, r5, lr}
 80009ba:	690b      	ldr	r3, [r1, #16]
 80009bc:	4605      	mov	r5, r0
 80009be:	460c      	mov	r4, r1
 80009c0:	b913      	cbnz	r3, 80009c8 <_fflush_r+0x10>
 80009c2:	2500      	movs	r5, #0
 80009c4:	4628      	mov	r0, r5
 80009c6:	bd38      	pop	{r3, r4, r5, pc}
 80009c8:	b118      	cbz	r0, 80009d2 <_fflush_r+0x1a>
 80009ca:	6983      	ldr	r3, [r0, #24]
 80009cc:	b90b      	cbnz	r3, 80009d2 <_fflush_r+0x1a>
 80009ce:	f000 f887 	bl	8000ae0 <__sinit>
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <_fflush_r+0x6c>)
 80009d4:	429c      	cmp	r4, r3
 80009d6:	d11b      	bne.n	8000a10 <_fflush_r+0x58>
 80009d8:	686c      	ldr	r4, [r5, #4]
 80009da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d0ef      	beq.n	80009c2 <_fflush_r+0xa>
 80009e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80009e4:	07d0      	lsls	r0, r2, #31
 80009e6:	d404      	bmi.n	80009f2 <_fflush_r+0x3a>
 80009e8:	0599      	lsls	r1, r3, #22
 80009ea:	d402      	bmi.n	80009f2 <_fflush_r+0x3a>
 80009ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009ee:	f000 f915 	bl	8000c1c <__retarget_lock_acquire_recursive>
 80009f2:	4628      	mov	r0, r5
 80009f4:	4621      	mov	r1, r4
 80009f6:	f7ff ff59 	bl	80008ac <__sflush_r>
 80009fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80009fc:	07da      	lsls	r2, r3, #31
 80009fe:	4605      	mov	r5, r0
 8000a00:	d4e0      	bmi.n	80009c4 <_fflush_r+0xc>
 8000a02:	89a3      	ldrh	r3, [r4, #12]
 8000a04:	059b      	lsls	r3, r3, #22
 8000a06:	d4dd      	bmi.n	80009c4 <_fflush_r+0xc>
 8000a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a0a:	f000 f908 	bl	8000c1e <__retarget_lock_release_recursive>
 8000a0e:	e7d9      	b.n	80009c4 <_fflush_r+0xc>
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <_fflush_r+0x70>)
 8000a12:	429c      	cmp	r4, r3
 8000a14:	d101      	bne.n	8000a1a <_fflush_r+0x62>
 8000a16:	68ac      	ldr	r4, [r5, #8]
 8000a18:	e7df      	b.n	80009da <_fflush_r+0x22>
 8000a1a:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <_fflush_r+0x74>)
 8000a1c:	429c      	cmp	r4, r3
 8000a1e:	bf08      	it	eq
 8000a20:	68ec      	ldreq	r4, [r5, #12]
 8000a22:	e7da      	b.n	80009da <_fflush_r+0x22>
 8000a24:	08001090 	.word	0x08001090
 8000a28:	080010b0 	.word	0x080010b0
 8000a2c:	08001070 	.word	0x08001070

08000a30 <std>:
 8000a30:	2300      	movs	r3, #0
 8000a32:	b510      	push	{r4, lr}
 8000a34:	4604      	mov	r4, r0
 8000a36:	e9c0 3300 	strd	r3, r3, [r0]
 8000a3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a3e:	6083      	str	r3, [r0, #8]
 8000a40:	8181      	strh	r1, [r0, #12]
 8000a42:	6643      	str	r3, [r0, #100]	; 0x64
 8000a44:	81c2      	strh	r2, [r0, #14]
 8000a46:	6183      	str	r3, [r0, #24]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	2208      	movs	r2, #8
 8000a4c:	305c      	adds	r0, #92	; 0x5c
 8000a4e:	f7ff fdef 	bl	8000630 <memset>
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <std+0x38>)
 8000a54:	6263      	str	r3, [r4, #36]	; 0x24
 8000a56:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <std+0x3c>)
 8000a58:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <std+0x40>)
 8000a5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a5e:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <std+0x44>)
 8000a60:	6224      	str	r4, [r4, #32]
 8000a62:	6323      	str	r3, [r4, #48]	; 0x30
 8000a64:	bd10      	pop	{r4, pc}
 8000a66:	bf00      	nop
 8000a68:	08000ecd 	.word	0x08000ecd
 8000a6c:	08000eef 	.word	0x08000eef
 8000a70:	08000f27 	.word	0x08000f27
 8000a74:	08000f4b 	.word	0x08000f4b

08000a78 <_cleanup_r>:
 8000a78:	4901      	ldr	r1, [pc, #4]	; (8000a80 <_cleanup_r+0x8>)
 8000a7a:	f000 b8af 	b.w	8000bdc <_fwalk_reent>
 8000a7e:	bf00      	nop
 8000a80:	080009b9 	.word	0x080009b9

08000a84 <__sfmoreglue>:
 8000a84:	b570      	push	{r4, r5, r6, lr}
 8000a86:	2268      	movs	r2, #104	; 0x68
 8000a88:	1e4d      	subs	r5, r1, #1
 8000a8a:	4355      	muls	r5, r2
 8000a8c:	460e      	mov	r6, r1
 8000a8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000a92:	f000 f997 	bl	8000dc4 <_malloc_r>
 8000a96:	4604      	mov	r4, r0
 8000a98:	b140      	cbz	r0, 8000aac <__sfmoreglue+0x28>
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	e9c0 1600 	strd	r1, r6, [r0]
 8000aa0:	300c      	adds	r0, #12
 8000aa2:	60a0      	str	r0, [r4, #8]
 8000aa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000aa8:	f7ff fdc2 	bl	8000630 <memset>
 8000aac:	4620      	mov	r0, r4
 8000aae:	bd70      	pop	{r4, r5, r6, pc}

08000ab0 <__sfp_lock_acquire>:
 8000ab0:	4801      	ldr	r0, [pc, #4]	; (8000ab8 <__sfp_lock_acquire+0x8>)
 8000ab2:	f000 b8b3 	b.w	8000c1c <__retarget_lock_acquire_recursive>
 8000ab6:	bf00      	nop
 8000ab8:	20000085 	.word	0x20000085

08000abc <__sfp_lock_release>:
 8000abc:	4801      	ldr	r0, [pc, #4]	; (8000ac4 <__sfp_lock_release+0x8>)
 8000abe:	f000 b8ae 	b.w	8000c1e <__retarget_lock_release_recursive>
 8000ac2:	bf00      	nop
 8000ac4:	20000085 	.word	0x20000085

08000ac8 <__sinit_lock_acquire>:
 8000ac8:	4801      	ldr	r0, [pc, #4]	; (8000ad0 <__sinit_lock_acquire+0x8>)
 8000aca:	f000 b8a7 	b.w	8000c1c <__retarget_lock_acquire_recursive>
 8000ace:	bf00      	nop
 8000ad0:	20000086 	.word	0x20000086

08000ad4 <__sinit_lock_release>:
 8000ad4:	4801      	ldr	r0, [pc, #4]	; (8000adc <__sinit_lock_release+0x8>)
 8000ad6:	f000 b8a2 	b.w	8000c1e <__retarget_lock_release_recursive>
 8000ada:	bf00      	nop
 8000adc:	20000086 	.word	0x20000086

08000ae0 <__sinit>:
 8000ae0:	b510      	push	{r4, lr}
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	f7ff fff0 	bl	8000ac8 <__sinit_lock_acquire>
 8000ae8:	69a3      	ldr	r3, [r4, #24]
 8000aea:	b11b      	cbz	r3, 8000af4 <__sinit+0x14>
 8000aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000af0:	f7ff bff0 	b.w	8000ad4 <__sinit_lock_release>
 8000af4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000af8:	6523      	str	r3, [r4, #80]	; 0x50
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <__sinit+0x68>)
 8000afc:	4a13      	ldr	r2, [pc, #76]	; (8000b4c <__sinit+0x6c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	62a2      	str	r2, [r4, #40]	; 0x28
 8000b02:	42a3      	cmp	r3, r4
 8000b04:	bf04      	itt	eq
 8000b06:	2301      	moveq	r3, #1
 8000b08:	61a3      	streq	r3, [r4, #24]
 8000b0a:	4620      	mov	r0, r4
 8000b0c:	f000 f820 	bl	8000b50 <__sfp>
 8000b10:	6060      	str	r0, [r4, #4]
 8000b12:	4620      	mov	r0, r4
 8000b14:	f000 f81c 	bl	8000b50 <__sfp>
 8000b18:	60a0      	str	r0, [r4, #8]
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	f000 f818 	bl	8000b50 <__sfp>
 8000b20:	2200      	movs	r2, #0
 8000b22:	60e0      	str	r0, [r4, #12]
 8000b24:	2104      	movs	r1, #4
 8000b26:	6860      	ldr	r0, [r4, #4]
 8000b28:	f7ff ff82 	bl	8000a30 <std>
 8000b2c:	68a0      	ldr	r0, [r4, #8]
 8000b2e:	2201      	movs	r2, #1
 8000b30:	2109      	movs	r1, #9
 8000b32:	f7ff ff7d 	bl	8000a30 <std>
 8000b36:	68e0      	ldr	r0, [r4, #12]
 8000b38:	2202      	movs	r2, #2
 8000b3a:	2112      	movs	r1, #18
 8000b3c:	f7ff ff78 	bl	8000a30 <std>
 8000b40:	2301      	movs	r3, #1
 8000b42:	61a3      	str	r3, [r4, #24]
 8000b44:	e7d2      	b.n	8000aec <__sinit+0xc>
 8000b46:	bf00      	nop
 8000b48:	0800106c 	.word	0x0800106c
 8000b4c:	08000a79 	.word	0x08000a79

08000b50 <__sfp>:
 8000b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b52:	4607      	mov	r7, r0
 8000b54:	f7ff ffac 	bl	8000ab0 <__sfp_lock_acquire>
 8000b58:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <__sfp+0x84>)
 8000b5a:	681e      	ldr	r6, [r3, #0]
 8000b5c:	69b3      	ldr	r3, [r6, #24]
 8000b5e:	b913      	cbnz	r3, 8000b66 <__sfp+0x16>
 8000b60:	4630      	mov	r0, r6
 8000b62:	f7ff ffbd 	bl	8000ae0 <__sinit>
 8000b66:	3648      	adds	r6, #72	; 0x48
 8000b68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	d503      	bpl.n	8000b78 <__sfp+0x28>
 8000b70:	6833      	ldr	r3, [r6, #0]
 8000b72:	b30b      	cbz	r3, 8000bb8 <__sfp+0x68>
 8000b74:	6836      	ldr	r6, [r6, #0]
 8000b76:	e7f7      	b.n	8000b68 <__sfp+0x18>
 8000b78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000b7c:	b9d5      	cbnz	r5, 8000bb4 <__sfp+0x64>
 8000b7e:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <__sfp+0x88>)
 8000b80:	60e3      	str	r3, [r4, #12]
 8000b82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000b86:	6665      	str	r5, [r4, #100]	; 0x64
 8000b88:	f000 f847 	bl	8000c1a <__retarget_lock_init_recursive>
 8000b8c:	f7ff ff96 	bl	8000abc <__sfp_lock_release>
 8000b90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000b94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000b98:	6025      	str	r5, [r4, #0]
 8000b9a:	61a5      	str	r5, [r4, #24]
 8000b9c:	2208      	movs	r2, #8
 8000b9e:	4629      	mov	r1, r5
 8000ba0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000ba4:	f7ff fd44 	bl	8000630 <memset>
 8000ba8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000bac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bb4:	3468      	adds	r4, #104	; 0x68
 8000bb6:	e7d9      	b.n	8000b6c <__sfp+0x1c>
 8000bb8:	2104      	movs	r1, #4
 8000bba:	4638      	mov	r0, r7
 8000bbc:	f7ff ff62 	bl	8000a84 <__sfmoreglue>
 8000bc0:	4604      	mov	r4, r0
 8000bc2:	6030      	str	r0, [r6, #0]
 8000bc4:	2800      	cmp	r0, #0
 8000bc6:	d1d5      	bne.n	8000b74 <__sfp+0x24>
 8000bc8:	f7ff ff78 	bl	8000abc <__sfp_lock_release>
 8000bcc:	230c      	movs	r3, #12
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	e7ee      	b.n	8000bb0 <__sfp+0x60>
 8000bd2:	bf00      	nop
 8000bd4:	0800106c 	.word	0x0800106c
 8000bd8:	ffff0001 	.word	0xffff0001

08000bdc <_fwalk_reent>:
 8000bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000be0:	4606      	mov	r6, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000be8:	2700      	movs	r7, #0
 8000bea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000bee:	f1b9 0901 	subs.w	r9, r9, #1
 8000bf2:	d505      	bpl.n	8000c00 <_fwalk_reent+0x24>
 8000bf4:	6824      	ldr	r4, [r4, #0]
 8000bf6:	2c00      	cmp	r4, #0
 8000bf8:	d1f7      	bne.n	8000bea <_fwalk_reent+0xe>
 8000bfa:	4638      	mov	r0, r7
 8000bfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c00:	89ab      	ldrh	r3, [r5, #12]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d907      	bls.n	8000c16 <_fwalk_reent+0x3a>
 8000c06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	d003      	beq.n	8000c16 <_fwalk_reent+0x3a>
 8000c0e:	4629      	mov	r1, r5
 8000c10:	4630      	mov	r0, r6
 8000c12:	47c0      	blx	r8
 8000c14:	4307      	orrs	r7, r0
 8000c16:	3568      	adds	r5, #104	; 0x68
 8000c18:	e7e9      	b.n	8000bee <_fwalk_reent+0x12>

08000c1a <__retarget_lock_init_recursive>:
 8000c1a:	4770      	bx	lr

08000c1c <__retarget_lock_acquire_recursive>:
 8000c1c:	4770      	bx	lr

08000c1e <__retarget_lock_release_recursive>:
 8000c1e:	4770      	bx	lr

08000c20 <__swhatbuf_r>:
 8000c20:	b570      	push	{r4, r5, r6, lr}
 8000c22:	460e      	mov	r6, r1
 8000c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c28:	2900      	cmp	r1, #0
 8000c2a:	b096      	sub	sp, #88	; 0x58
 8000c2c:	4614      	mov	r4, r2
 8000c2e:	461d      	mov	r5, r3
 8000c30:	da08      	bge.n	8000c44 <__swhatbuf_r+0x24>
 8000c32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000c36:	2200      	movs	r2, #0
 8000c38:	602a      	str	r2, [r5, #0]
 8000c3a:	061a      	lsls	r2, r3, #24
 8000c3c:	d410      	bmi.n	8000c60 <__swhatbuf_r+0x40>
 8000c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c42:	e00e      	b.n	8000c62 <__swhatbuf_r+0x42>
 8000c44:	466a      	mov	r2, sp
 8000c46:	f000 f9a7 	bl	8000f98 <_fstat_r>
 8000c4a:	2800      	cmp	r0, #0
 8000c4c:	dbf1      	blt.n	8000c32 <__swhatbuf_r+0x12>
 8000c4e:	9a01      	ldr	r2, [sp, #4]
 8000c50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000c54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000c58:	425a      	negs	r2, r3
 8000c5a:	415a      	adcs	r2, r3
 8000c5c:	602a      	str	r2, [r5, #0]
 8000c5e:	e7ee      	b.n	8000c3e <__swhatbuf_r+0x1e>
 8000c60:	2340      	movs	r3, #64	; 0x40
 8000c62:	2000      	movs	r0, #0
 8000c64:	6023      	str	r3, [r4, #0]
 8000c66:	b016      	add	sp, #88	; 0x58
 8000c68:	bd70      	pop	{r4, r5, r6, pc}
	...

08000c6c <__smakebuf_r>:
 8000c6c:	898b      	ldrh	r3, [r1, #12]
 8000c6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000c70:	079d      	lsls	r5, r3, #30
 8000c72:	4606      	mov	r6, r0
 8000c74:	460c      	mov	r4, r1
 8000c76:	d507      	bpl.n	8000c88 <__smakebuf_r+0x1c>
 8000c78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000c7c:	6023      	str	r3, [r4, #0]
 8000c7e:	6123      	str	r3, [r4, #16]
 8000c80:	2301      	movs	r3, #1
 8000c82:	6163      	str	r3, [r4, #20]
 8000c84:	b002      	add	sp, #8
 8000c86:	bd70      	pop	{r4, r5, r6, pc}
 8000c88:	ab01      	add	r3, sp, #4
 8000c8a:	466a      	mov	r2, sp
 8000c8c:	f7ff ffc8 	bl	8000c20 <__swhatbuf_r>
 8000c90:	9900      	ldr	r1, [sp, #0]
 8000c92:	4605      	mov	r5, r0
 8000c94:	4630      	mov	r0, r6
 8000c96:	f000 f895 	bl	8000dc4 <_malloc_r>
 8000c9a:	b948      	cbnz	r0, 8000cb0 <__smakebuf_r+0x44>
 8000c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ca0:	059a      	lsls	r2, r3, #22
 8000ca2:	d4ef      	bmi.n	8000c84 <__smakebuf_r+0x18>
 8000ca4:	f023 0303 	bic.w	r3, r3, #3
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	81a3      	strh	r3, [r4, #12]
 8000cae:	e7e3      	b.n	8000c78 <__smakebuf_r+0xc>
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <__smakebuf_r+0x7c>)
 8000cb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8000cb4:	89a3      	ldrh	r3, [r4, #12]
 8000cb6:	6020      	str	r0, [r4, #0]
 8000cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cbc:	81a3      	strh	r3, [r4, #12]
 8000cbe:	9b00      	ldr	r3, [sp, #0]
 8000cc0:	6163      	str	r3, [r4, #20]
 8000cc2:	9b01      	ldr	r3, [sp, #4]
 8000cc4:	6120      	str	r0, [r4, #16]
 8000cc6:	b15b      	cbz	r3, 8000ce0 <__smakebuf_r+0x74>
 8000cc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ccc:	4630      	mov	r0, r6
 8000cce:	f000 f975 	bl	8000fbc <_isatty_r>
 8000cd2:	b128      	cbz	r0, 8000ce0 <__smakebuf_r+0x74>
 8000cd4:	89a3      	ldrh	r3, [r4, #12]
 8000cd6:	f023 0303 	bic.w	r3, r3, #3
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	81a3      	strh	r3, [r4, #12]
 8000ce0:	89a0      	ldrh	r0, [r4, #12]
 8000ce2:	4305      	orrs	r5, r0
 8000ce4:	81a5      	strh	r5, [r4, #12]
 8000ce6:	e7cd      	b.n	8000c84 <__smakebuf_r+0x18>
 8000ce8:	08000a79 	.word	0x08000a79

08000cec <_free_r>:
 8000cec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000cee:	2900      	cmp	r1, #0
 8000cf0:	d044      	beq.n	8000d7c <_free_r+0x90>
 8000cf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000cf6:	9001      	str	r0, [sp, #4]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	f1a1 0404 	sub.w	r4, r1, #4
 8000cfe:	bfb8      	it	lt
 8000d00:	18e4      	addlt	r4, r4, r3
 8000d02:	f000 f97d 	bl	8001000 <__malloc_lock>
 8000d06:	4a1e      	ldr	r2, [pc, #120]	; (8000d80 <_free_r+0x94>)
 8000d08:	9801      	ldr	r0, [sp, #4]
 8000d0a:	6813      	ldr	r3, [r2, #0]
 8000d0c:	b933      	cbnz	r3, 8000d1c <_free_r+0x30>
 8000d0e:	6063      	str	r3, [r4, #4]
 8000d10:	6014      	str	r4, [r2, #0]
 8000d12:	b003      	add	sp, #12
 8000d14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000d18:	f000 b978 	b.w	800100c <__malloc_unlock>
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d908      	bls.n	8000d32 <_free_r+0x46>
 8000d20:	6825      	ldr	r5, [r4, #0]
 8000d22:	1961      	adds	r1, r4, r5
 8000d24:	428b      	cmp	r3, r1
 8000d26:	bf01      	itttt	eq
 8000d28:	6819      	ldreq	r1, [r3, #0]
 8000d2a:	685b      	ldreq	r3, [r3, #4]
 8000d2c:	1949      	addeq	r1, r1, r5
 8000d2e:	6021      	streq	r1, [r4, #0]
 8000d30:	e7ed      	b.n	8000d0e <_free_r+0x22>
 8000d32:	461a      	mov	r2, r3
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	b10b      	cbz	r3, 8000d3c <_free_r+0x50>
 8000d38:	42a3      	cmp	r3, r4
 8000d3a:	d9fa      	bls.n	8000d32 <_free_r+0x46>
 8000d3c:	6811      	ldr	r1, [r2, #0]
 8000d3e:	1855      	adds	r5, r2, r1
 8000d40:	42a5      	cmp	r5, r4
 8000d42:	d10b      	bne.n	8000d5c <_free_r+0x70>
 8000d44:	6824      	ldr	r4, [r4, #0]
 8000d46:	4421      	add	r1, r4
 8000d48:	1854      	adds	r4, r2, r1
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	6011      	str	r1, [r2, #0]
 8000d4e:	d1e0      	bne.n	8000d12 <_free_r+0x26>
 8000d50:	681c      	ldr	r4, [r3, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	6053      	str	r3, [r2, #4]
 8000d56:	4421      	add	r1, r4
 8000d58:	6011      	str	r1, [r2, #0]
 8000d5a:	e7da      	b.n	8000d12 <_free_r+0x26>
 8000d5c:	d902      	bls.n	8000d64 <_free_r+0x78>
 8000d5e:	230c      	movs	r3, #12
 8000d60:	6003      	str	r3, [r0, #0]
 8000d62:	e7d6      	b.n	8000d12 <_free_r+0x26>
 8000d64:	6825      	ldr	r5, [r4, #0]
 8000d66:	1961      	adds	r1, r4, r5
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	bf04      	itt	eq
 8000d6c:	6819      	ldreq	r1, [r3, #0]
 8000d6e:	685b      	ldreq	r3, [r3, #4]
 8000d70:	6063      	str	r3, [r4, #4]
 8000d72:	bf04      	itt	eq
 8000d74:	1949      	addeq	r1, r1, r5
 8000d76:	6021      	streq	r1, [r4, #0]
 8000d78:	6054      	str	r4, [r2, #4]
 8000d7a:	e7ca      	b.n	8000d12 <_free_r+0x26>
 8000d7c:	b003      	add	sp, #12
 8000d7e:	bd30      	pop	{r4, r5, pc}
 8000d80:	20000088 	.word	0x20000088

08000d84 <sbrk_aligned>:
 8000d84:	b570      	push	{r4, r5, r6, lr}
 8000d86:	4e0e      	ldr	r6, [pc, #56]	; (8000dc0 <sbrk_aligned+0x3c>)
 8000d88:	460c      	mov	r4, r1
 8000d8a:	6831      	ldr	r1, [r6, #0]
 8000d8c:	4605      	mov	r5, r0
 8000d8e:	b911      	cbnz	r1, 8000d96 <sbrk_aligned+0x12>
 8000d90:	f000 f88c 	bl	8000eac <_sbrk_r>
 8000d94:	6030      	str	r0, [r6, #0]
 8000d96:	4621      	mov	r1, r4
 8000d98:	4628      	mov	r0, r5
 8000d9a:	f000 f887 	bl	8000eac <_sbrk_r>
 8000d9e:	1c43      	adds	r3, r0, #1
 8000da0:	d00a      	beq.n	8000db8 <sbrk_aligned+0x34>
 8000da2:	1cc4      	adds	r4, r0, #3
 8000da4:	f024 0403 	bic.w	r4, r4, #3
 8000da8:	42a0      	cmp	r0, r4
 8000daa:	d007      	beq.n	8000dbc <sbrk_aligned+0x38>
 8000dac:	1a21      	subs	r1, r4, r0
 8000dae:	4628      	mov	r0, r5
 8000db0:	f000 f87c 	bl	8000eac <_sbrk_r>
 8000db4:	3001      	adds	r0, #1
 8000db6:	d101      	bne.n	8000dbc <sbrk_aligned+0x38>
 8000db8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	bd70      	pop	{r4, r5, r6, pc}
 8000dc0:	2000008c 	.word	0x2000008c

08000dc4 <_malloc_r>:
 8000dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dc8:	1ccd      	adds	r5, r1, #3
 8000dca:	f025 0503 	bic.w	r5, r5, #3
 8000dce:	3508      	adds	r5, #8
 8000dd0:	2d0c      	cmp	r5, #12
 8000dd2:	bf38      	it	cc
 8000dd4:	250c      	movcc	r5, #12
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	4607      	mov	r7, r0
 8000dda:	db01      	blt.n	8000de0 <_malloc_r+0x1c>
 8000ddc:	42a9      	cmp	r1, r5
 8000dde:	d905      	bls.n	8000dec <_malloc_r+0x28>
 8000de0:	230c      	movs	r3, #12
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	2600      	movs	r6, #0
 8000de6:	4630      	mov	r0, r6
 8000de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000dec:	4e2e      	ldr	r6, [pc, #184]	; (8000ea8 <_malloc_r+0xe4>)
 8000dee:	f000 f907 	bl	8001000 <__malloc_lock>
 8000df2:	6833      	ldr	r3, [r6, #0]
 8000df4:	461c      	mov	r4, r3
 8000df6:	bb34      	cbnz	r4, 8000e46 <_malloc_r+0x82>
 8000df8:	4629      	mov	r1, r5
 8000dfa:	4638      	mov	r0, r7
 8000dfc:	f7ff ffc2 	bl	8000d84 <sbrk_aligned>
 8000e00:	1c43      	adds	r3, r0, #1
 8000e02:	4604      	mov	r4, r0
 8000e04:	d14d      	bne.n	8000ea2 <_malloc_r+0xde>
 8000e06:	6834      	ldr	r4, [r6, #0]
 8000e08:	4626      	mov	r6, r4
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d140      	bne.n	8000e90 <_malloc_r+0xcc>
 8000e0e:	6823      	ldr	r3, [r4, #0]
 8000e10:	4631      	mov	r1, r6
 8000e12:	4638      	mov	r0, r7
 8000e14:	eb04 0803 	add.w	r8, r4, r3
 8000e18:	f000 f848 	bl	8000eac <_sbrk_r>
 8000e1c:	4580      	cmp	r8, r0
 8000e1e:	d13a      	bne.n	8000e96 <_malloc_r+0xd2>
 8000e20:	6821      	ldr	r1, [r4, #0]
 8000e22:	3503      	adds	r5, #3
 8000e24:	1a6d      	subs	r5, r5, r1
 8000e26:	f025 0503 	bic.w	r5, r5, #3
 8000e2a:	3508      	adds	r5, #8
 8000e2c:	2d0c      	cmp	r5, #12
 8000e2e:	bf38      	it	cc
 8000e30:	250c      	movcc	r5, #12
 8000e32:	4629      	mov	r1, r5
 8000e34:	4638      	mov	r0, r7
 8000e36:	f7ff ffa5 	bl	8000d84 <sbrk_aligned>
 8000e3a:	3001      	adds	r0, #1
 8000e3c:	d02b      	beq.n	8000e96 <_malloc_r+0xd2>
 8000e3e:	6823      	ldr	r3, [r4, #0]
 8000e40:	442b      	add	r3, r5
 8000e42:	6023      	str	r3, [r4, #0]
 8000e44:	e00e      	b.n	8000e64 <_malloc_r+0xa0>
 8000e46:	6822      	ldr	r2, [r4, #0]
 8000e48:	1b52      	subs	r2, r2, r5
 8000e4a:	d41e      	bmi.n	8000e8a <_malloc_r+0xc6>
 8000e4c:	2a0b      	cmp	r2, #11
 8000e4e:	d916      	bls.n	8000e7e <_malloc_r+0xba>
 8000e50:	1961      	adds	r1, r4, r5
 8000e52:	42a3      	cmp	r3, r4
 8000e54:	6025      	str	r5, [r4, #0]
 8000e56:	bf18      	it	ne
 8000e58:	6059      	strne	r1, [r3, #4]
 8000e5a:	6863      	ldr	r3, [r4, #4]
 8000e5c:	bf08      	it	eq
 8000e5e:	6031      	streq	r1, [r6, #0]
 8000e60:	5162      	str	r2, [r4, r5]
 8000e62:	604b      	str	r3, [r1, #4]
 8000e64:	4638      	mov	r0, r7
 8000e66:	f104 060b 	add.w	r6, r4, #11
 8000e6a:	f000 f8cf 	bl	800100c <__malloc_unlock>
 8000e6e:	f026 0607 	bic.w	r6, r6, #7
 8000e72:	1d23      	adds	r3, r4, #4
 8000e74:	1af2      	subs	r2, r6, r3
 8000e76:	d0b6      	beq.n	8000de6 <_malloc_r+0x22>
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	50a3      	str	r3, [r4, r2]
 8000e7c:	e7b3      	b.n	8000de6 <_malloc_r+0x22>
 8000e7e:	6862      	ldr	r2, [r4, #4]
 8000e80:	42a3      	cmp	r3, r4
 8000e82:	bf0c      	ite	eq
 8000e84:	6032      	streq	r2, [r6, #0]
 8000e86:	605a      	strne	r2, [r3, #4]
 8000e88:	e7ec      	b.n	8000e64 <_malloc_r+0xa0>
 8000e8a:	4623      	mov	r3, r4
 8000e8c:	6864      	ldr	r4, [r4, #4]
 8000e8e:	e7b2      	b.n	8000df6 <_malloc_r+0x32>
 8000e90:	4634      	mov	r4, r6
 8000e92:	6876      	ldr	r6, [r6, #4]
 8000e94:	e7b9      	b.n	8000e0a <_malloc_r+0x46>
 8000e96:	230c      	movs	r3, #12
 8000e98:	603b      	str	r3, [r7, #0]
 8000e9a:	4638      	mov	r0, r7
 8000e9c:	f000 f8b6 	bl	800100c <__malloc_unlock>
 8000ea0:	e7a1      	b.n	8000de6 <_malloc_r+0x22>
 8000ea2:	6025      	str	r5, [r4, #0]
 8000ea4:	e7de      	b.n	8000e64 <_malloc_r+0xa0>
 8000ea6:	bf00      	nop
 8000ea8:	20000088 	.word	0x20000088

08000eac <_sbrk_r>:
 8000eac:	b538      	push	{r3, r4, r5, lr}
 8000eae:	4d06      	ldr	r5, [pc, #24]	; (8000ec8 <_sbrk_r+0x1c>)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	4604      	mov	r4, r0
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	602b      	str	r3, [r5, #0]
 8000eb8:	f7ff fa4c 	bl	8000354 <_sbrk>
 8000ebc:	1c43      	adds	r3, r0, #1
 8000ebe:	d102      	bne.n	8000ec6 <_sbrk_r+0x1a>
 8000ec0:	682b      	ldr	r3, [r5, #0]
 8000ec2:	b103      	cbz	r3, 8000ec6 <_sbrk_r+0x1a>
 8000ec4:	6023      	str	r3, [r4, #0]
 8000ec6:	bd38      	pop	{r3, r4, r5, pc}
 8000ec8:	20000090 	.word	0x20000090

08000ecc <__sread>:
 8000ecc:	b510      	push	{r4, lr}
 8000ece:	460c      	mov	r4, r1
 8000ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ed4:	f000 f8a0 	bl	8001018 <_read_r>
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	bfab      	itete	ge
 8000edc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000ede:	89a3      	ldrhlt	r3, [r4, #12]
 8000ee0:	181b      	addge	r3, r3, r0
 8000ee2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000ee6:	bfac      	ite	ge
 8000ee8:	6563      	strge	r3, [r4, #84]	; 0x54
 8000eea:	81a3      	strhlt	r3, [r4, #12]
 8000eec:	bd10      	pop	{r4, pc}

08000eee <__swrite>:
 8000eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ef2:	461f      	mov	r7, r3
 8000ef4:	898b      	ldrh	r3, [r1, #12]
 8000ef6:	05db      	lsls	r3, r3, #23
 8000ef8:	4605      	mov	r5, r0
 8000efa:	460c      	mov	r4, r1
 8000efc:	4616      	mov	r6, r2
 8000efe:	d505      	bpl.n	8000f0c <__swrite+0x1e>
 8000f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f04:	2302      	movs	r3, #2
 8000f06:	2200      	movs	r2, #0
 8000f08:	f000 f868 	bl	8000fdc <_lseek_r>
 8000f0c:	89a3      	ldrh	r3, [r4, #12]
 8000f0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f16:	81a3      	strh	r3, [r4, #12]
 8000f18:	4632      	mov	r2, r6
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f22:	f000 b817 	b.w	8000f54 <_write_r>

08000f26 <__sseek>:
 8000f26:	b510      	push	{r4, lr}
 8000f28:	460c      	mov	r4, r1
 8000f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f2e:	f000 f855 	bl	8000fdc <_lseek_r>
 8000f32:	1c43      	adds	r3, r0, #1
 8000f34:	89a3      	ldrh	r3, [r4, #12]
 8000f36:	bf15      	itete	ne
 8000f38:	6560      	strne	r0, [r4, #84]	; 0x54
 8000f3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000f3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000f42:	81a3      	strheq	r3, [r4, #12]
 8000f44:	bf18      	it	ne
 8000f46:	81a3      	strhne	r3, [r4, #12]
 8000f48:	bd10      	pop	{r4, pc}

08000f4a <__sclose>:
 8000f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f4e:	f000 b813 	b.w	8000f78 <_close_r>
	...

08000f54 <_write_r>:
 8000f54:	b538      	push	{r3, r4, r5, lr}
 8000f56:	4d07      	ldr	r5, [pc, #28]	; (8000f74 <_write_r+0x20>)
 8000f58:	4604      	mov	r4, r0
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	2200      	movs	r2, #0
 8000f60:	602a      	str	r2, [r5, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	f7ff f9a5 	bl	80002b2 <_write>
 8000f68:	1c43      	adds	r3, r0, #1
 8000f6a:	d102      	bne.n	8000f72 <_write_r+0x1e>
 8000f6c:	682b      	ldr	r3, [r5, #0]
 8000f6e:	b103      	cbz	r3, 8000f72 <_write_r+0x1e>
 8000f70:	6023      	str	r3, [r4, #0]
 8000f72:	bd38      	pop	{r3, r4, r5, pc}
 8000f74:	20000090 	.word	0x20000090

08000f78 <_close_r>:
 8000f78:	b538      	push	{r3, r4, r5, lr}
 8000f7a:	4d06      	ldr	r5, [pc, #24]	; (8000f94 <_close_r+0x1c>)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	4604      	mov	r4, r0
 8000f80:	4608      	mov	r0, r1
 8000f82:	602b      	str	r3, [r5, #0]
 8000f84:	f7ff f9b1 	bl	80002ea <_close>
 8000f88:	1c43      	adds	r3, r0, #1
 8000f8a:	d102      	bne.n	8000f92 <_close_r+0x1a>
 8000f8c:	682b      	ldr	r3, [r5, #0]
 8000f8e:	b103      	cbz	r3, 8000f92 <_close_r+0x1a>
 8000f90:	6023      	str	r3, [r4, #0]
 8000f92:	bd38      	pop	{r3, r4, r5, pc}
 8000f94:	20000090 	.word	0x20000090

08000f98 <_fstat_r>:
 8000f98:	b538      	push	{r3, r4, r5, lr}
 8000f9a:	4d07      	ldr	r5, [pc, #28]	; (8000fb8 <_fstat_r+0x20>)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	602b      	str	r3, [r5, #0]
 8000fa6:	f7ff f9ac 	bl	8000302 <_fstat>
 8000faa:	1c43      	adds	r3, r0, #1
 8000fac:	d102      	bne.n	8000fb4 <_fstat_r+0x1c>
 8000fae:	682b      	ldr	r3, [r5, #0]
 8000fb0:	b103      	cbz	r3, 8000fb4 <_fstat_r+0x1c>
 8000fb2:	6023      	str	r3, [r4, #0]
 8000fb4:	bd38      	pop	{r3, r4, r5, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000090 	.word	0x20000090

08000fbc <_isatty_r>:
 8000fbc:	b538      	push	{r3, r4, r5, lr}
 8000fbe:	4d06      	ldr	r5, [pc, #24]	; (8000fd8 <_isatty_r+0x1c>)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	602b      	str	r3, [r5, #0]
 8000fc8:	f7ff f9ab 	bl	8000322 <_isatty>
 8000fcc:	1c43      	adds	r3, r0, #1
 8000fce:	d102      	bne.n	8000fd6 <_isatty_r+0x1a>
 8000fd0:	682b      	ldr	r3, [r5, #0]
 8000fd2:	b103      	cbz	r3, 8000fd6 <_isatty_r+0x1a>
 8000fd4:	6023      	str	r3, [r4, #0]
 8000fd6:	bd38      	pop	{r3, r4, r5, pc}
 8000fd8:	20000090 	.word	0x20000090

08000fdc <_lseek_r>:
 8000fdc:	b538      	push	{r3, r4, r5, lr}
 8000fde:	4d07      	ldr	r5, [pc, #28]	; (8000ffc <_lseek_r+0x20>)
 8000fe0:	4604      	mov	r4, r0
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	602a      	str	r2, [r5, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	f7ff f9a4 	bl	8000338 <_lseek>
 8000ff0:	1c43      	adds	r3, r0, #1
 8000ff2:	d102      	bne.n	8000ffa <_lseek_r+0x1e>
 8000ff4:	682b      	ldr	r3, [r5, #0]
 8000ff6:	b103      	cbz	r3, 8000ffa <_lseek_r+0x1e>
 8000ff8:	6023      	str	r3, [r4, #0]
 8000ffa:	bd38      	pop	{r3, r4, r5, pc}
 8000ffc:	20000090 	.word	0x20000090

08001000 <__malloc_lock>:
 8001000:	4801      	ldr	r0, [pc, #4]	; (8001008 <__malloc_lock+0x8>)
 8001002:	f7ff be0b 	b.w	8000c1c <__retarget_lock_acquire_recursive>
 8001006:	bf00      	nop
 8001008:	20000084 	.word	0x20000084

0800100c <__malloc_unlock>:
 800100c:	4801      	ldr	r0, [pc, #4]	; (8001014 <__malloc_unlock+0x8>)
 800100e:	f7ff be06 	b.w	8000c1e <__retarget_lock_release_recursive>
 8001012:	bf00      	nop
 8001014:	20000084 	.word	0x20000084

08001018 <_read_r>:
 8001018:	b538      	push	{r3, r4, r5, lr}
 800101a:	4d07      	ldr	r5, [pc, #28]	; (8001038 <_read_r+0x20>)
 800101c:	4604      	mov	r4, r0
 800101e:	4608      	mov	r0, r1
 8001020:	4611      	mov	r1, r2
 8001022:	2200      	movs	r2, #0
 8001024:	602a      	str	r2, [r5, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	f7ff f926 	bl	8000278 <_read>
 800102c:	1c43      	adds	r3, r0, #1
 800102e:	d102      	bne.n	8001036 <_read_r+0x1e>
 8001030:	682b      	ldr	r3, [r5, #0]
 8001032:	b103      	cbz	r3, 8001036 <_read_r+0x1e>
 8001034:	6023      	str	r3, [r4, #0]
 8001036:	bd38      	pop	{r3, r4, r5, pc}
 8001038:	20000090 	.word	0x20000090

0800103c <_init>:
 800103c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800103e:	bf00      	nop
 8001040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001042:	bc08      	pop	{r3}
 8001044:	469e      	mov	lr, r3
 8001046:	4770      	bx	lr

08001048 <_fini>:
 8001048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800104a:	bf00      	nop
 800104c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800104e:	bc08      	pop	{r3}
 8001050:	469e      	mov	lr, r3
 8001052:	4770      	bx	lr
