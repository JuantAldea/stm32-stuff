
011_systick_delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000280  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000428  08000430  00010430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000428  08000428  00010430  2**0
                  CONTENTS
  4 .ARM          00000000  08000428  08000428  00010430  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000428  08000430  00010430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000428  08000428  00010428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800042c  0800042c  0001042c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000430  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000430  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010430  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c15  00000000  00000000  00010460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000051d  00000000  00000000  00012075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  00012598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000078  00000000  00000000  00012648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001172  00000000  00000000  000126c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001366  00000000  00000000  00013832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bd80  00000000  00000000  00014b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a0918  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000017c  00000000  00000000  000a096c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000410 	.word	0x08000410

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000410 	.word	0x08000410

080001e8 <main>:

#define PIN6 (1UL << 6);

#define LED1_PIN PIN6

int main(void) {
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001ec:	4b0f      	ldr	r3, [pc, #60]	; (800022c <main+0x44>)
 80001ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f0:	4a0e      	ldr	r2, [pc, #56]	; (800022c <main+0x44>)
 80001f2:	f043 0301 	orr.w	r3, r3, #1
 80001f6:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= GPIO_MODER_MODER6_0;
 80001f8:	4b0d      	ldr	r3, [pc, #52]	; (8000230 <main+0x48>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a0c      	ldr	r2, [pc, #48]	; (8000230 <main+0x48>)
 80001fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000202:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODER6_1;
 8000204:	4b0a      	ldr	r3, [pc, #40]	; (8000230 <main+0x48>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a09      	ldr	r2, [pc, #36]	; (8000230 <main+0x48>)
 800020a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800020e:	6013      	str	r3, [r2, #0]

	uart1_rx_tx_init();
 8000210:	f000 f844 	bl	800029c <uart1_rx_tx_init>

	while (1) {
		GPIOA->ODR ^= LED1_PIN;
 8000214:	4b06      	ldr	r3, [pc, #24]	; (8000230 <main+0x48>)
 8000216:	695b      	ldr	r3, [r3, #20]
 8000218:	4a05      	ldr	r2, [pc, #20]	; (8000230 <main+0x48>)
 800021a:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 800021e:	6153      	str	r3, [r2, #20]
		systick_delay_ms(1000);
 8000220:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000224:	f000 f806 	bl	8000234 <systick_delay_ms>
		GPIOA->ODR ^= LED1_PIN;
 8000228:	e7f4      	b.n	8000214 <main+0x2c>
 800022a:	bf00      	nop
 800022c:	40023800 	.word	0x40023800
 8000230:	40020000 	.word	0x40020000

08000234 <systick_delay_ms>:
#define SYSTICK_LOAD_VAL 16000 //ticks/ms
#define SYSTICK_CTRL_ENABLE (1UL << 0)
#define SYSTICK_CTRL_CLKSRC (1UL << 2)
#define SYSTICK_CTRL_COUNTFLAG (1UL << 16)

void systick_delay_ms(uint32_t ms) {
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 800023c:	4b16      	ldr	r3, [pc, #88]	; (8000298 <systick_delay_ms+0x64>)
 800023e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000242:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000244:	4b14      	ldr	r3, [pc, #80]	; (8000298 <systick_delay_ms+0x64>)
 8000246:	2200      	movs	r2, #0
 8000248:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 800024a:	4b13      	ldr	r3, [pc, #76]	; (8000298 <systick_delay_ms+0x64>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a12      	ldr	r2, [pc, #72]	; (8000298 <systick_delay_ms+0x64>)
 8000250:	f043 0304 	orr.w	r3, r3, #4
 8000254:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8000256:	4b10      	ldr	r3, [pc, #64]	; (8000298 <systick_delay_ms+0x64>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a0f      	ldr	r2, [pc, #60]	; (8000298 <systick_delay_ms+0x64>)
 800025c:	f043 0301 	orr.w	r3, r3, #1
 8000260:	6013      	str	r3, [r2, #0]

	for (int i = 0; i < ms; ++i) {
 8000262:	2300      	movs	r3, #0
 8000264:	60fb      	str	r3, [r7, #12]
 8000266:	e009      	b.n	800027c <systick_delay_ms+0x48>
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
 8000268:	bf00      	nop
 800026a:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <systick_delay_ms+0x64>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000272:	2b00      	cmp	r3, #0
 8000274:	d0f9      	beq.n	800026a <systick_delay_ms+0x36>
	for (int i = 0; i < ms; ++i) {
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	3301      	adds	r3, #1
 800027a:	60fb      	str	r3, [r7, #12]
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	687a      	ldr	r2, [r7, #4]
 8000280:	429a      	cmp	r2, r3
 8000282:	d8f1      	bhi.n	8000268 <systick_delay_ms+0x34>
			;
		}
	}

	SysTick->CTRL = 0;
 8000284:	4b04      	ldr	r3, [pc, #16]	; (8000298 <systick_delay_ms+0x64>)
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
}
 800028a:	bf00      	nop
 800028c:	3714      	adds	r7, #20
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000e010 	.word	0xe000e010

0800029c <uart1_rx_tx_init>:
#define APB1_CLK SYS_FREQ

static void set_uart_baudrate(USART_TypeDef *USARTx, uint32_t perif_clk, uint32_t baudrate);
static uint16_t compute_uart_bd(uint32_t perif_clk, uint32_t baudrate);

void uart1_rx_tx_init() {
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	//UART1_TX -> PA9
	// pass clock to GPIO_A
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002a0:	4b1d      	ldr	r3, [pc, #116]	; (8000318 <uart1_rx_tx_init+0x7c>)
 80002a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a4:	4a1c      	ldr	r2, [pc, #112]	; (8000318 <uart1_rx_tx_init+0x7c>)
 80002a6:	f043 0301 	orr.w	r3, r3, #1
 80002aa:	6313      	str	r3, [r2, #48]	; 0x30
	//pass clock to USART1
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80002ac:	4b1a      	ldr	r3, [pc, #104]	; (8000318 <uart1_rx_tx_init+0x7c>)
 80002ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002b0:	4a19      	ldr	r2, [pc, #100]	; (8000318 <uart1_rx_tx_init+0x7c>)
 80002b2:	f043 0310 	orr.w	r3, r3, #16
 80002b6:	6453      	str	r3, [r2, #68]	; 0x44

	//set mode to alternate function
	GPIOA->MODER &= ~GPIO_MODER_MODER9;
 80002b8:	4b18      	ldr	r3, [pc, #96]	; (800031c <uart1_rx_tx_init+0x80>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a17      	ldr	r2, [pc, #92]	; (800031c <uart1_rx_tx_init+0x80>)
 80002be:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80002c2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER9_1;
 80002c4:	4b15      	ldr	r3, [pc, #84]	; (800031c <uart1_rx_tx_init+0x80>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a14      	ldr	r2, [pc, #80]	; (800031c <uart1_rx_tx_init+0x80>)
 80002ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002ce:	6013      	str	r3, [r2, #0]

	GPIOA->MODER &= ~GPIO_MODER_MODER10;
 80002d0:	4b12      	ldr	r3, [pc, #72]	; (800031c <uart1_rx_tx_init+0x80>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a11      	ldr	r2, [pc, #68]	; (800031c <uart1_rx_tx_init+0x80>)
 80002d6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80002da:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER10_1;
 80002dc:	4b0f      	ldr	r3, [pc, #60]	; (800031c <uart1_rx_tx_init+0x80>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a0e      	ldr	r2, [pc, #56]	; (800031c <uart1_rx_tx_init+0x80>)
 80002e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002e6:	6013      	str	r3, [r2, #0]

	// set alternate function to USART_TX AF07 (0111 -> 0x7 :D)
	GPIOA->AFR[1] |= GPIO_AFRH_AFSEL9_2 | GPIO_AFRH_AFSEL9_1 | GPIO_AFRH_AFSEL9_0;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <uart1_rx_tx_init+0x80>)
 80002ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ec:	4a0b      	ldr	r2, [pc, #44]	; (800031c <uart1_rx_tx_init+0x80>)
 80002ee:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80002f2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= GPIO_AFRH_AFSEL10_2 | GPIO_AFRH_AFSEL10_1 | GPIO_AFRH_AFSEL10_0;
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <uart1_rx_tx_init+0x80>)
 80002f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002f8:	4a08      	ldr	r2, [pc, #32]	; (800031c <uart1_rx_tx_init+0x80>)
 80002fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80002fe:	6253      	str	r3, [r2, #36]	; 0x24
	// configure UART module
	// baud rate
	set_uart_baudrate(USART1, APB1_CLK, UART_BAUDRATE);
 8000300:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000304:	4906      	ldr	r1, [pc, #24]	; (8000320 <uart1_rx_tx_init+0x84>)
 8000306:	4807      	ldr	r0, [pc, #28]	; (8000324 <uart1_rx_tx_init+0x88>)
 8000308:	f000 f821 	bl	800034e <set_uart_baudrate>
	// transfer direction & enable UART module
	USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 800030c:	4b05      	ldr	r3, [pc, #20]	; (8000324 <uart1_rx_tx_init+0x88>)
 800030e:	f242 020c 	movw	r2, #8204	; 0x200c
 8000312:	60da      	str	r2, [r3, #12]
}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	40023800 	.word	0x40023800
 800031c:	40020000 	.word	0x40020000
 8000320:	00f42400 	.word	0x00f42400
 8000324:	40011000 	.word	0x40011000

08000328 <compute_uart_bd>:

	while (!(uartx->SR & USART_SR_TXE)) {
	}
}

static uint16_t compute_uart_bd(uint32_t perif_clk, uint32_t baudrate) {
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	6039      	str	r1, [r7, #0]

	//USARTx->BRR = (8 << 4) | 11;

	// integer round up equivalent to round(x.y) = X.Y + 0.5
	// CLK/BR + 1/2
	return (perif_clk + (baudrate / 2U)) / baudrate;
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	085a      	lsrs	r2, r3, #1
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	441a      	add	r2, r3
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000340:	b29b      	uxth	r3, r3
}
 8000342:	4618      	mov	r0, r3
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr

0800034e <set_uart_baudrate>:

static void set_uart_baudrate(USART_TypeDef *USARTx, uint32_t perif_clk, uint32_t baudrate) {
 800034e:	b580      	push	{r7, lr}
 8000350:	b084      	sub	sp, #16
 8000352:	af00      	add	r7, sp, #0
 8000354:	60f8      	str	r0, [r7, #12]
 8000356:	60b9      	str	r1, [r7, #8]
 8000358:	607a      	str	r2, [r7, #4]

	USARTx->BRR = compute_uart_bd(perif_clk, baudrate);
 800035a:	6879      	ldr	r1, [r7, #4]
 800035c:	68b8      	ldr	r0, [r7, #8]
 800035e:	f7ff ffe3 	bl	8000328 <compute_uart_bd>
 8000362:	4603      	mov	r3, r0
 8000364:	461a      	mov	r2, r3
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	609a      	str	r2, [r3, #8]
}
 800036a:	bf00      	nop
 800036c:	3710      	adds	r7, #16
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
	...

08000374 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000374:	480d      	ldr	r0, [pc, #52]	; (80003ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000376:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000378:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800037c:	480c      	ldr	r0, [pc, #48]	; (80003b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800037e:	490d      	ldr	r1, [pc, #52]	; (80003b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000380:	4a0d      	ldr	r2, [pc, #52]	; (80003b8 <LoopForever+0xe>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000384:	e002      	b.n	800038c <LoopCopyDataInit>

08000386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038a:	3304      	adds	r3, #4

0800038c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800038c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000390:	d3f9      	bcc.n	8000386 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000392:	4a0a      	ldr	r2, [pc, #40]	; (80003bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000394:	4c0a      	ldr	r4, [pc, #40]	; (80003c0 <LoopForever+0x16>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000398:	e001      	b.n	800039e <LoopFillZerobss>

0800039a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800039c:	3204      	adds	r2, #4

0800039e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a0:	d3fb      	bcc.n	800039a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003a2:	f000 f811 	bl	80003c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003a6:	f7ff ff1f 	bl	80001e8 <main>

080003aa <LoopForever>:

LoopForever:
    b LoopForever
 80003aa:	e7fe      	b.n	80003aa <LoopForever>
  ldr   r0, =_estack
 80003ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003b8:	08000430 	.word	0x08000430
  ldr r2, =_sbss
 80003bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003c0:	2000001c 	.word	0x2000001c

080003c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c4:	e7fe      	b.n	80003c4 <ADC_IRQHandler>
	...

080003c8 <__libc_init_array>:
 80003c8:	b570      	push	{r4, r5, r6, lr}
 80003ca:	4d0d      	ldr	r5, [pc, #52]	; (8000400 <__libc_init_array+0x38>)
 80003cc:	4c0d      	ldr	r4, [pc, #52]	; (8000404 <__libc_init_array+0x3c>)
 80003ce:	1b64      	subs	r4, r4, r5
 80003d0:	10a4      	asrs	r4, r4, #2
 80003d2:	2600      	movs	r6, #0
 80003d4:	42a6      	cmp	r6, r4
 80003d6:	d109      	bne.n	80003ec <__libc_init_array+0x24>
 80003d8:	4d0b      	ldr	r5, [pc, #44]	; (8000408 <__libc_init_array+0x40>)
 80003da:	4c0c      	ldr	r4, [pc, #48]	; (800040c <__libc_init_array+0x44>)
 80003dc:	f000 f818 	bl	8000410 <_init>
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	10a4      	asrs	r4, r4, #2
 80003e4:	2600      	movs	r6, #0
 80003e6:	42a6      	cmp	r6, r4
 80003e8:	d105      	bne.n	80003f6 <__libc_init_array+0x2e>
 80003ea:	bd70      	pop	{r4, r5, r6, pc}
 80003ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f0:	4798      	blx	r3
 80003f2:	3601      	adds	r6, #1
 80003f4:	e7ee      	b.n	80003d4 <__libc_init_array+0xc>
 80003f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003fa:	4798      	blx	r3
 80003fc:	3601      	adds	r6, #1
 80003fe:	e7f2      	b.n	80003e6 <__libc_init_array+0x1e>
 8000400:	08000428 	.word	0x08000428
 8000404:	08000428 	.word	0x08000428
 8000408:	08000428 	.word	0x08000428
 800040c:	0800042c 	.word	0x0800042c

08000410 <_init>:
 8000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000412:	bf00      	nop
 8000414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000416:	bc08      	pop	{r3}
 8000418:	469e      	mov	lr, r3
 800041a:	4770      	bx	lr

0800041c <_fini>:
 800041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041e:	bf00      	nop
 8000420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000422:	bc08      	pop	{r3}
 8000424:	469e      	mov	lr, r3
 8000426:	4770      	bx	lr
